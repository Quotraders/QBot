{
  "timestamp": "2025-09-05T14:05:16.103730",
  "discovery": {
    "total_functions": 66,
    "total_features": 66,
    "features_by_category": {
      "AI_Learning": [
        {
          "name": "create_sample_workflow",
          "file": "complete_integration_demo.py",
          "description": "Create a sample workflow to demonstrate learning capabilities",
          "line": 15
        },
        {
          "name": "run",
          "file": "cloud_mechanic_core.py",
          "description": "Main run function",
          "line": 260
        },
        {
          "name": "learn_from_failure",
          "file": "cloud_mechanic_core.py",
          "description": "Learn from preparation failures",
          "line": 777
        },
        {
          "name": "optimize_all_workflows",
          "file": "workflow_optimizer.py",
          "description": "Apply optimizations to all workflows",
          "line": 20
        },
        {
          "name": "optimize_workflow",
          "file": "workflow_optimizer.py",
          "description": "Optimize a single workflow file",
          "line": 57
        },
        {
          "name": "optimize_checkout",
          "file": "workflow_optimizer.py",
          "description": "Optimize checkout steps for faster cloning",
          "line": 140
        },
        {
          "name": "initialize_patterns",
          "file": "workflow_learner.py",
          "description": "Initialize known step patterns and their optimizations",
          "line": 32
        },
        {
          "name": "parse_and_learn_workflow",
          "file": "workflow_learner.py",
          "description": "Parse and learn from workflow YAML content",
          "line": 166
        },
        {
          "name": "get_learning_summary",
          "file": "workflow_learner.py",
          "description": "Get summary of learning progress",
          "line": 530
        },
        {
          "name": "main",
          "file": "smoke_test.py",
          "description": "Run smoke test",
          "line": 106
        },
        {
          "name": "analyze_workflows",
          "file": "workflow_analyzer.py",
          "description": "Perform detailed analysis of all workflows",
          "line": 19
        },
        {
          "name": "repair_all_workflows",
          "file": "repair_system.py",
          "description": "Repair all broken workflows",
          "line": 20
        },
        {
          "name": "repair_workflow",
          "file": "repair_system.py",
          "description": "Repair a single workflow",
          "line": 69
        },
        {
          "name": "print_repair_summary",
          "file": "repair_system.py",
          "description": "Print repair summary",
          "line": 317
        }
      ],
      "Core_System": [
        {
          "name": "load_json",
          "file": "cloud_mechanic_core.py",
          "description": "Load JSON with default fallback",
          "line": 68
        },
        {
          "name": "save_json",
          "file": "cloud_mechanic_core.py",
          "description": "Save JSON data",
          "line": 78
        },
        {
          "name": "setup_directories",
          "file": "cloud_mechanic_core.py",
          "description": "Setup additional directories for ultimate features",
          "line": 368
        },
        {
          "name": "load_json",
          "file": "report_generator.py",
          "description": "Load JSON with default fallback",
          "line": 270
        },
        {
          "name": "save_json",
          "file": "report_generator.py",
          "description": "Save JSON data",
          "line": 280
        },
        {
          "name": "save_text",
          "file": "report_generator.py",
          "description": "Save text content",
          "line": 289
        },
        {
          "name": "save_json",
          "file": "workflow_optimizer.py",
          "description": "Save JSON data",
          "line": 224
        },
        {
          "name": "save_json",
          "file": "workflow_analyzer.py",
          "description": "Save JSON data",
          "line": 187
        },
        {
          "name": "get_default_job",
          "file": "repair_system.py",
          "description": "Get a default job configuration",
          "line": 176
        },
        {
          "name": "load_json",
          "file": "repair_system.py",
          "description": "Load JSON with default fallback",
          "line": 342
        },
        {
          "name": "save_json",
          "file": "repair_system.py",
          "description": "Save JSON data",
          "line": 352
        }
      ],
      "Workflow_Analysis": [
        {
          "name": "analyze_all_workflows",
          "file": "cloud_mechanic_core.py",
          "description": "Deep analysis of all workflows",
          "line": 87
        },
        {
          "name": "analyze_workflow_health",
          "file": "report_generator.py",
          "description": "Analyze overall workflow health",
          "line": 84
        },
        {
          "name": "add_caching",
          "file": "workflow_optimizer.py",
          "description": "Add caching to workflow",
          "line": 103
        },
        {
          "name": "analyze_step",
          "file": "workflow_learner.py",
          "description": "Analyze a workflow step for optimization opportunities",
          "line": 215
        },
        {
          "name": "analyze_triggers",
          "file": "workflow_learner.py",
          "description": "Analyze workflow triggers",
          "line": 287
        },
        {
          "name": "generate_optimizations",
          "file": "workflow_learner.py",
          "description": "Generate optimization recommendations for a workflow",
          "line": 360
        },
        {
          "name": "parse_yaml",
          "file": "workflow_learner.py",
          "description": "Simple YAML parser for workflows",
          "line": 450
        },
        {
          "name": "test_workflow_analysis",
          "file": "smoke_test.py",
          "description": "Test workflow analysis on existing workflows",
          "line": 86
        },
        {
          "name": "analyze_single_workflow",
          "file": "workflow_analyzer.py",
          "description": "Analyze a single workflow file",
          "line": 57
        },
        {
          "name": "analyze_job",
          "file": "workflow_analyzer.py",
          "description": "Analyze a single job",
          "line": 99
        },
        {
          "name": "check_workflow_issues",
          "file": "workflow_analyzer.py",
          "description": "Check for common workflow issues",
          "line": 131
        },
        {
          "name": "check_missing_critical_workflows",
          "file": "repair_system.py",
          "description": "Check for missing critical workflows",
          "line": 139
        },
        {
          "name": "create_missing_workflow",
          "file": "repair_system.py",
          "description": "Create a missing critical workflow",
          "line": 154
        },
        {
          "name": "get_basic_workflow_template",
          "file": "repair_system.py",
          "description": "Get a basic workflow template",
          "line": 203
        },
        {
          "name": "get_workflow_template",
          "file": "repair_system.py",
          "description": "Get template for specific workflow types",
          "line": 216
        },
        {
          "name": "get_cloud_mechanic_template",
          "file": "repair_system.py",
          "description": "Get cloud bot mechanic workflow template",
          "line": 226
        },
        {
          "name": "get_ci_template",
          "file": "repair_system.py",
          "description": "Get CI workflow template",
          "line": 255
        },
        {
          "name": "get_qa_template",
          "file": "repair_system.py",
          "description": "Get quality assurance workflow template",
          "line": 285
        }
      ],
      "Reporting_Alerting": [
        {
          "name": "generate_report",
          "file": "cloud_mechanic_core.py",
          "description": "Generate comprehensive report",
          "line": 278
        },
        {
          "name": "generate_alerts",
          "file": "cloud_mechanic_core.py",
          "description": "Generate alerts for critical issues",
          "line": 294
        },
        {
          "name": "set_github_outputs",
          "file": "cloud_mechanic_core.py",
          "description": "Set GitHub Actions outputs",
          "line": 307
        },
        {
          "name": "generate_comprehensive_report",
          "file": "report_generator.py",
          "description": "Generate a comprehensive report of all mechanic activities",
          "line": 17
        },
        {
          "name": "generate_summary",
          "file": "report_generator.py",
          "description": "Generate high-level summary",
          "line": 58
        },
        {
          "name": "generate_recommendations",
          "file": "report_generator.py",
          "description": "Generate actionable recommendations",
          "line": 158
        },
        {
          "name": "generate_markdown_report",
          "file": "report_generator.py",
          "description": "Generate a markdown version of the report",
          "line": 201
        },
        {
          "name": "print_report_summary",
          "file": "report_generator.py",
          "description": "Print a summary of the generated report",
          "line": 256
        },
        {
          "name": "set_github_output",
          "file": "workflow_optimizer.py",
          "description": "Set GitHub Actions output",
          "line": 215
        },
        {
          "name": "generate_optimization_hints",
          "file": "workflow_analyzer.py",
          "description": "Generate overall optimization hints",
          "line": 152
        },
        {
          "name": "set_github_output",
          "file": "repair_system.py",
          "description": "Set GitHub Actions output",
          "line": 333
        }
      ],
      "Performance_Monitoring": [
        {
          "name": "get_ultimate_metrics",
          "file": "cloud_mechanic_core.py",
          "description": "Get comprehensive metrics for the ultimate mechanic",
          "line": 801
        },
        {
          "name": "calculate_performance_metrics",
          "file": "report_generator.py",
          "description": "Calculate performance metrics",
          "line": 115
        }
      ],
      "Caching_Optimization": [
        {
          "name": "compile_recent_activities",
          "file": "report_generator.py",
          "description": "Compile recent activities",
          "line": 144
        }
      ],
      "Scheduling_Triggers": [
        {
          "name": "set_timeouts",
          "file": "workflow_optimizer.py",
          "description": "Set appropriate timeouts for jobs",
          "line": 156
        }
      ],
      "Utility_Functions": [
        {
          "name": "add_conditional_execution",
          "file": "workflow_optimizer.py",
          "description": "Add conditional execution to reduce unnecessary runs",
          "line": 178
        },
        {
          "name": "print_optimization_summary",
          "file": "workflow_optimizer.py",
          "description": "Print optimization summary",
          "line": 203
        },
        {
          "name": "calculate_critical_path",
          "file": "workflow_learner.py",
          "description": "Find the longest path through job dependencies",
          "line": 321
        },
        {
          "name": "simple_yaml_parse",
          "file": "workflow_learner.py",
          "description": "Fallback simple YAML parser",
          "line": 458
        },
        {
          "name": "find_path",
          "file": "workflow_learner.py",
          "description": "Function in workflow_learner.py",
          "line": 326
        },
        {
          "name": "print_analysis_summary",
          "file": "workflow_analyzer.py",
          "description": "Print analysis summary",
          "line": 175
        }
      ],
      "Testing_Validation": [
        {
          "name": "test_imports",
          "file": "smoke_test.py",
          "description": "Test that all modules can be imported",
          "line": 14
        },
        {
          "name": "test_basic_functionality",
          "file": "smoke_test.py",
          "description": "Test basic functionality",
          "line": 55
        }
      ]
    },
    "function_inventory": {
      "complete_integration_demo.py": [
        {
          "name": "create_sample_workflow",
          "line": 15,
          "docstring": "Create a sample workflow to demonstrate learning capabilities"
        }
      ],
      "cloud_mechanic_core.py": [
        {
          "name": "load_json",
          "line": 68,
          "docstring": "Load JSON with default fallback"
        },
        {
          "name": "save_json",
          "line": 78,
          "docstring": "Save JSON data"
        },
        {
          "name": "analyze_all_workflows",
          "line": 87,
          "docstring": "Deep analysis of all workflows"
        },
        {
          "name": "run",
          "line": 260,
          "docstring": "Main run function"
        },
        {
          "name": "generate_report",
          "line": 278,
          "docstring": "Generate comprehensive report"
        },
        {
          "name": "generate_alerts",
          "line": 294,
          "docstring": "Generate alerts for critical issues"
        },
        {
          "name": "set_github_outputs",
          "line": 307,
          "docstring": "Set GitHub Actions outputs"
        },
        {
          "name": "setup_directories",
          "line": 368,
          "docstring": "Setup additional directories for ultimate features"
        },
        {
          "name": "learn_from_failure",
          "line": 777,
          "docstring": "Learn from preparation failures"
        },
        {
          "name": "get_ultimate_metrics",
          "line": 801,
          "docstring": "Get comprehensive metrics for the ultimate mechanic"
        }
      ],
      "report_generator.py": [
        {
          "name": "generate_comprehensive_report",
          "line": 17,
          "docstring": "Generate a comprehensive report of all mechanic activities"
        },
        {
          "name": "generate_summary",
          "line": 58,
          "docstring": "Generate high-level summary"
        },
        {
          "name": "analyze_workflow_health",
          "line": 84,
          "docstring": "Analyze overall workflow health"
        },
        {
          "name": "calculate_performance_metrics",
          "line": 115,
          "docstring": "Calculate performance metrics"
        },
        {
          "name": "compile_recent_activities",
          "line": 144,
          "docstring": "Compile recent activities"
        },
        {
          "name": "generate_recommendations",
          "line": 158,
          "docstring": "Generate actionable recommendations"
        },
        {
          "name": "generate_markdown_report",
          "line": 201,
          "docstring": "Generate a markdown version of the report"
        },
        {
          "name": "print_report_summary",
          "line": 256,
          "docstring": "Print a summary of the generated report"
        },
        {
          "name": "load_json",
          "line": 270,
          "docstring": "Load JSON with default fallback"
        },
        {
          "name": "save_json",
          "line": 280,
          "docstring": "Save JSON data"
        },
        {
          "name": "save_text",
          "line": 289,
          "docstring": "Save text content"
        }
      ],
      "workflow_optimizer.py": [
        {
          "name": "optimize_all_workflows",
          "line": 20,
          "docstring": "Apply optimizations to all workflows"
        },
        {
          "name": "optimize_workflow",
          "line": 57,
          "docstring": "Optimize a single workflow file"
        },
        {
          "name": "add_caching",
          "line": 103,
          "docstring": "Add caching to workflow"
        },
        {
          "name": "optimize_checkout",
          "line": 140,
          "docstring": "Optimize checkout steps for faster cloning"
        },
        {
          "name": "set_timeouts",
          "line": 156,
          "docstring": "Set appropriate timeouts for jobs"
        },
        {
          "name": "add_conditional_execution",
          "line": 178,
          "docstring": "Add conditional execution to reduce unnecessary runs"
        },
        {
          "name": "print_optimization_summary",
          "line": 203,
          "docstring": "Print optimization summary"
        },
        {
          "name": "set_github_output",
          "line": 215,
          "docstring": "Set GitHub Actions output"
        },
        {
          "name": "save_json",
          "line": 224,
          "docstring": "Save JSON data"
        }
      ],
      "workflow_learner.py": [
        {
          "name": "initialize_patterns",
          "line": 32,
          "docstring": "Initialize known step patterns and their optimizations"
        },
        {
          "name": "parse_and_learn_workflow",
          "line": 166,
          "docstring": "Parse and learn from workflow YAML content"
        },
        {
          "name": "analyze_step",
          "line": 215,
          "docstring": "Analyze a workflow step for optimization opportunities"
        },
        {
          "name": "analyze_triggers",
          "line": 287,
          "docstring": "Analyze workflow triggers"
        },
        {
          "name": "calculate_critical_path",
          "line": 321,
          "docstring": "Find the longest path through job dependencies"
        },
        {
          "name": "generate_optimizations",
          "line": 360,
          "docstring": "Generate optimization recommendations for a workflow"
        },
        {
          "name": "parse_yaml",
          "line": 450,
          "docstring": "Simple YAML parser for workflows"
        },
        {
          "name": "simple_yaml_parse",
          "line": 458,
          "docstring": "Fallback simple YAML parser"
        },
        {
          "name": "get_learning_summary",
          "line": 530,
          "docstring": "Get summary of learning progress"
        },
        {
          "name": "find_path",
          "line": 326,
          "docstring": ""
        }
      ],
      "smoke_test.py": [
        {
          "name": "test_imports",
          "line": 14,
          "docstring": "Test that all modules can be imported"
        },
        {
          "name": "test_basic_functionality",
          "line": 55,
          "docstring": "Test basic functionality"
        },
        {
          "name": "test_workflow_analysis",
          "line": 86,
          "docstring": "Test workflow analysis on existing workflows"
        },
        {
          "name": "main",
          "line": 106,
          "docstring": "Run smoke test"
        }
      ],
      "demo_ultimate_features.py": [],
      "workflow_analyzer.py": [
        {
          "name": "analyze_workflows",
          "line": 19,
          "docstring": "Perform detailed analysis of all workflows"
        },
        {
          "name": "analyze_single_workflow",
          "line": 57,
          "docstring": "Analyze a single workflow file"
        },
        {
          "name": "analyze_job",
          "line": 99,
          "docstring": "Analyze a single job"
        },
        {
          "name": "check_workflow_issues",
          "line": 131,
          "docstring": "Check for common workflow issues"
        },
        {
          "name": "generate_optimization_hints",
          "line": 152,
          "docstring": "Generate overall optimization hints"
        },
        {
          "name": "print_analysis_summary",
          "line": 175,
          "docstring": "Print analysis summary"
        },
        {
          "name": "save_json",
          "line": 187,
          "docstring": "Save JSON data"
        }
      ],
      "repair_system.py": [
        {
          "name": "repair_all_workflows",
          "line": 20,
          "docstring": "Repair all broken workflows"
        },
        {
          "name": "repair_workflow",
          "line": 69,
          "docstring": "Repair a single workflow"
        },
        {
          "name": "check_missing_critical_workflows",
          "line": 139,
          "docstring": "Check for missing critical workflows"
        },
        {
          "name": "create_missing_workflow",
          "line": 154,
          "docstring": "Create a missing critical workflow"
        },
        {
          "name": "get_default_job",
          "line": 176,
          "docstring": "Get a default job configuration"
        },
        {
          "name": "get_basic_workflow_template",
          "line": 203,
          "docstring": "Get a basic workflow template"
        },
        {
          "name": "get_workflow_template",
          "line": 216,
          "docstring": "Get template for specific workflow types"
        },
        {
          "name": "get_cloud_mechanic_template",
          "line": 226,
          "docstring": "Get cloud bot mechanic workflow template"
        },
        {
          "name": "get_ci_template",
          "line": 255,
          "docstring": "Get CI workflow template"
        },
        {
          "name": "get_qa_template",
          "line": 285,
          "docstring": "Get quality assurance workflow template"
        },
        {
          "name": "print_repair_summary",
          "line": 317,
          "docstring": "Print repair summary"
        },
        {
          "name": "set_github_output",
          "line": 333,
          "docstring": "Set GitHub Actions output"
        },
        {
          "name": "load_json",
          "line": 342,
          "docstring": "Load JSON with default fallback"
        },
        {
          "name": "save_json",
          "line": 352,
          "docstring": "Save JSON data"
        }
      ],
      "test_ultimate_integration.py": []
    }
  },
  "live_testing": {
    "execution_successful": true,
    "output_length": 1660,
    "features_active": 16,
    "total_features_tested": 16,
    "feature_evidence": {
      "workflow_discovery": true,
      "health_analysis": true,
      "issue_detection": true,
      "budget_monitoring": true,
      "ultimate_mode": true,
      "ai_optimization": true,
      "workflow_learning": true,
      "intelligent_preparation": true,
      "pre_compilation": true,
      "dependency_caching": true,
      "performance_metrics": true,
      "pattern_recognition": true,
      "failure_prediction": true,
      "auto_fixing": true,
      "bundle_creation": true,
      "custom_optimizations": true
    },
    "performance_excellent": true
  },
  "recommendations": [
    "Add more features to reach 85+ target"
  ]
}