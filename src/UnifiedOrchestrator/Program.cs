using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.SignalR.Client;
using System.Runtime.InteropServices;
using TradingBot.UnifiedOrchestrator.Interfaces;
using TradingBot.UnifiedOrchestrator.Services;
using TradingBot.UnifiedOrchestrator.Models;
using TradingBot.UnifiedOrchestrator.Infrastructure;
using TradingBot.UnifiedOrchestrator.Configuration;
using TradingBot.Abstractions;
using TradingBot.IntelligenceStack;
using TradingBot.Infrastructure.TopstepX;
using Infrastructure.TopstepX;
using BotCore.Services;
using DotNetEnv;
using static DotNetEnv.Env;

// Import types from aliased projects
using UnifiedTradingBrain = BotCore.Brain.UnifiedTradingBrain;
using Bar = BotCore.Market.Bar;

namespace TradingBot.UnifiedOrchestrator;

/// <summary>
/// üöÄ UNIFIED TRADING ORCHESTRATOR SYSTEM üöÄ
/// 
/// This is the ONE MASTER ORCHESTRATOR that replaces all 4+ separate orchestrators:
/// - Enhanced/TradingOrchestrator.cs
/// - Core/Intelligence/TradingIntelligenceOrchestrator.cs  
/// - src/OrchestratorAgent/Program.cs
/// - workflow-orchestrator.js
/// 
/// ALL FUNCTIONALITY IS NOW UNIFIED INTO ONE SYSTEM THAT WORKS TOGETHER
/// </summary>
public class Program
{
    // API Configuration Constants
    private const string TopstepXApiBaseUrl = "https://api.topstepx.com";
    private const string TopstepXUserAgent = "TopstepX-TradingBot/1.0";
    
    // Environment Variable Constants
    private const string TopstepXJwtEnvVar = "TOPSTEPX_JWT";
    private const string BooleanFalse = "false";
    private const string BotModeEnvVar = "BOT_MODE";
    
    // Logging Constants
    private const string TokenProviderLogSource = "TokenProvider";
    public static async Task Main(string[] args)
    {
        // Load .env files in priority order for auto TopstepX configuration
        EnvironmentLoader.LoadEnvironmentFiles();
        
        // Check for production demonstration command
        if (args.Length > 0 && args[0].Equals("--production-demo", StringComparison.OrdinalIgnoreCase))
        {
            await RunProductionDemonstrationAsync(args);
            return;
        }
        
        Console.WriteLine(@"
================================================================================
                    üöÄ UNIFIED TRADING ORCHESTRATOR SYSTEM üöÄ                       
                                                                               
  üß† ONE BRAIN - Consolidates all trading bot functionality into one     
  ‚ö° ONE SYSTEM - Replaces 4+ separate orchestrators with clean solution
  üîÑ ONE WORKFLOW ENGINE - All workflows managed by single scheduler  
  üåê ONE TOPSTEPX CONNECTION - Unified API and SignalR hub management      
  üìä ONE INTELLIGENCE SYSTEM - ML/RL models and predictions unified         
  üìà ONE TRADING ENGINE - All trading logic consolidated               
  üìÅ ONE DATA SYSTEM - Centralized data collection and reporting          
                                                                               
  ‚úÖ Clean Build - No duplicated logic or conflicts                         
  üîß Wired Together - All 1000+ features work in unison                     
  üéØ Single Purpose - Connect to TopstepX and trade effectively             

  üí° Run with --production-demo to generate runtime proof artifacts         
================================================================================
        ");

        try
        {
            // Build the unified host with all services
            var host = CreateHostBuilder(args).Build();
            
            // Display startup information
            // DisplayStartupInfo(); // Commented out for now to focus on build
            
            // Run the unified orchestrator
            await host.RunAsync();
        }
        catch (Exception ex)
        {
            var errorMsg = $"‚ùå CRITICAL ERROR: {ex.Message}";
            Console.WriteLine(errorMsg);
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            
            // Log to file for debugging and monitoring
            try
            {
                var logPath = Path.Combine(Directory.GetCurrentDirectory(), "critical_errors.log");
                var logEntry = $"[{DateTime.UtcNow:yyyy-MM-dd HH:mm:ss UTC}] {errorMsg}\n{ex.StackTrace}\n\n";
                File.AppendAllText(logPath, logEntry);
                Console.WriteLine($"Error logged to: {logPath}");
            }
            catch (Exception logEx)
            {
                // If logging fails, we still want to continue - just output to console
                Console.WriteLine($"Warning: Failed to write to error log: {logEx.Message}");
            }
            
            Environment.Exit(1);
        }
    }

    /// <summary>
    /// Run production demonstration to generate all runtime artifacts requested in PR review
    /// </summary>
    private static async Task RunProductionDemonstrationAsync(string[] args)
    {
        Console.WriteLine(@"
üöÄ PRODUCTION READINESS DEMONSTRATION
================================================================================
Generating runtime proof of all champion/challenger architecture capabilities:

‚úÖ UnifiedTradingBrain integration as primary decision maker
‚úÖ Statistical validation with p < 0.05 significance testing  
‚úÖ Rollback drill evidence with sub-100ms performance
‚úÖ Safe window enforcement with CME-aligned trading hours
‚úÖ Historical + live data integration verification
‚úÖ Acceptance criteria AC1-AC10 validation

Artifacts will be saved to: artifacts/production-demo/
================================================================================
        ");

        try
        {
            // Build host with all services
            var host = CreateHostBuilder(args).Build();
            
            // Get the production demonstration runner
            var demoRunner = host.Services.GetRequiredService<ProductionDemonstrationRunner>();
            
            // Run complete demonstration
            var result = await demoRunner.RunCompleteProductionDemoAsync(CancellationToken.None);
            
            if (result.Success)
            {
                Console.WriteLine($@"
üéâ PRODUCTION DEMONSTRATION COMPLETED SUCCESSFULLY!
================================================================================
Duration: {result.Duration}
Artifacts Path: {result.ArtifactsPath}

üìã Generated Artifacts:
‚úÖ Brain integration proof with 5+ decisions showing UnifiedTradingBrain as primary
‚úÖ Statistical validation report with p-value < 0.05 and CVaR analysis
‚úÖ Rollback drill logs showing sub-100ms performance under 50 decisions/sec load
‚úÖ Safe window enforcement proof with CME trading hours alignment
‚úÖ Data integration status showing both historical and live TopStep connections
‚úÖ Complete production readiness report meeting all AC1-AC10 criteria

üîç Review the artifacts in {result.ArtifactsPath} for runtime proof of all capabilities.
================================================================================
                ");
            }
            else
            {
                Console.WriteLine($@"
‚ùå PRODUCTION DEMONSTRATION FAILED
================================================================================
Duration: {result.Duration}
Error: {result.ErrorMessage}

Please check the logs and ensure all services are properly configured.
================================================================================
                ");
                Environment.Exit(1);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($@"
‚ùå CRITICAL ERROR IN PRODUCTION DEMONSTRATION
================================================================================
{ex.Message}

Stack Trace:
{ex.StackTrace}
================================================================================
            ");
            Environment.Exit(1);
        }
    }

    private static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureLogging(logging =>
            {
                logging.ClearProviders();
                logging.AddConsole(options => 
                {
                    options.FormatterName = "Production";
                });
                logging.AddConsoleFormatter<ProductionConsoleFormatter, Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions>();
                logging.SetMinimumLevel(LogLevel.Information);
                // REDUCE NOISE - Override Microsoft and System logging to warnings only
                logging.AddFilter("Microsoft", LogLevel.Warning);
                logging.AddFilter("System", LogLevel.Warning);
                logging.AddFilter("Microsoft.AspNetCore.SignalR", LogLevel.Error);
                logging.AddFilter("Microsoft.AspNetCore.Http", LogLevel.Error);
            })
            .ConfigureServices((context, services) =>
            {
                // ==============================================
                // THE ONE AND ONLY ORCHESTRATOR - MASTER BRAIN
                // ==============================================
                // Configure unified orchestrator services FIRST
                ConfigureUnifiedServices(services, context.Configuration, context);
            });

    private static void ConfigureUnifiedServices(IServiceCollection services, IConfiguration configuration, HostBuilderContext hostContext)
    {
        // Register login completion state for SignalR connection management
        services.AddSingleton<Services.ILoginCompletionState, Services.SimpleLoginCompletionState>();
        
        // Register TradingBot.Abstractions.ILoginCompletionState for AutoTopstepXLoginService
        // Bridge the local interface to the abstractions interface
        services.AddSingleton<TradingBot.Abstractions.ILoginCompletionState>(provider => 
        {
            var localState = provider.GetRequiredService<Services.ILoginCompletionState>();
            return new BridgeLoginCompletionState(localState);
        });
        
        // Register TradingLogger for production-ready logging
        services.Configure<TradingLoggerOptions>(options =>
        {
            var logDir = Environment.GetEnvironmentVariable("TRADING_LOG_DIR") ?? 
                        Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "TradingBot", "Logs");
            options.LogDirectory = logDir;
            options.BatchSize = int.Parse(Environment.GetEnvironmentVariable("LOG_BATCH_SIZE") ?? "1000");
            options.MaxFileSizeBytes = long.Parse(Environment.GetEnvironmentVariable("LOG_MAX_FILE_SIZE") ?? "104857600"); // 100MB
            options.LogRetentionDays = int.Parse(Environment.GetEnvironmentVariable("LOG_RETENTION_DAYS") ?? "30");
            options.DebugLogRetentionDays = int.Parse(Environment.GetEnvironmentVariable("DEBUG_LOG_RETENTION_DAYS") ?? "7");
            options.EnablePerformanceMetrics = Environment.GetEnvironmentVariable("ENABLE_PERFORMANCE_METRICS") != "false";
            options.EnableCriticalAlerts = Environment.GetEnvironmentVariable("ENABLE_CRITICAL_ALERTS") != "false";
            options.MarketDataSamplingRate = int.Parse(Environment.GetEnvironmentVariable("MARKET_DATA_SAMPLING_RATE") ?? "10");
            options.MLPredictionAggregationCount = int.Parse(Environment.GetEnvironmentVariable("ML_PREDICTION_AGGREGATION") ?? "100");
        });
        services.AddSingleton<ITradingLogger, Services.TradingLogger>();

        // Register centralized token provider for authentication management
        services.AddSingleton<ITokenProvider, CentralizedTokenProvider>();
        services.AddHostedService<CentralizedTokenProvider>(provider => 
            (CentralizedTokenProvider)provider.GetRequiredService<ITokenProvider>());

        // Register enhanced JWT lifecycle manager for token refresh coordination
        services.AddSingleton<IJwtLifecycleManager, JwtLifecycleManager>();
        services.AddHostedService<JwtLifecycleManager>(provider => 
            (JwtLifecycleManager)provider.GetRequiredService<IJwtLifecycleManager>());

        // Register environment validator for startup validation
        services.AddSingleton<IEnvironmentValidator, EnvironmentValidator>();

        // Register snapshot manager for state reconciliation
        services.AddSingleton<ISnapshotManager, SnapshotManager>();

        // Register SignalR connection manager for stable hub connections  
        services.AddSingleton<ISignalRConnectionManager, SignalRConnectionManager>();
        services.AddHostedService<SignalRConnectionManager>(provider => 
            (SignalRConnectionManager)provider.GetRequiredService<ISignalRConnectionManager>());

        // Register platform-aware Python path resolver
        services.AddSingleton<IPythonPathResolver, PlatformAwarePythonPathResolver>();

        // Register monitoring integration for metrics and log querying
        services.AddHostedService<MonitoringIntegrationService>();

        // Register enhanced authentication service for comprehensive auth logging
        services.AddHostedService<EnhancedAuthenticationService>();

        // Register AutoTopstepXLoginService to handle login completion signaling
        services.AddHostedService<AutoTopstepXLoginService>();

        // Register system health monitoring service
        services.AddHostedService<SystemHealthMonitoringService>();

        // Register trading activity logger for comprehensive trading event logging
        services.AddSingleton<TradingActivityLogger>();

        // Register log retention service for automatic cleanup
        services.AddHostedService<LogRetentionService>();

        // Register error handling service with fallback logging mechanisms
        services.AddSingleton<ErrorHandlingService>();
        services.AddHostedService<ErrorHandlingService>(provider => provider.GetRequiredService<ErrorHandlingService>());

        // Register TopstepX AccountService for live account data
        services.AddHttpClient<AccountService>(client =>
        {
            client.BaseAddress = new Uri(TopstepXApiBaseUrl);
            client.DefaultRequestHeaders.Add("User-Agent", TopstepXUserAgent);
            client.Timeout = TimeSpan.FromSeconds(30);
        });
        services.AddSingleton<IAccountService>(provider =>
        {
            var logger = provider.GetRequiredService<ILogger<AccountService>>();
            var appOptions = provider.GetRequiredService<IOptions<AppOptions>>();
            var httpClientFactory = provider.GetRequiredService<IHttpClientFactory>();
            var httpClient = httpClientFactory.CreateClient(nameof(AccountService));
            
            // Configure authentication when JWT token is available
            var jwtToken = Environment.GetEnvironmentVariable("TOPSTEPX_JWT");
            if (!string.IsNullOrEmpty(jwtToken))
            {
                httpClient.DefaultRequestHeaders.Authorization = 
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);
            }
            
            return new AccountService(logger, appOptions, httpClient);
        });

        // Register TopstepX OrderService for order management
        services.AddHttpClient<TradingBot.Infrastructure.TopstepX.OrderService>(client =>
        {
            client.BaseAddress = new Uri(TopstepXApiBaseUrl);
            client.DefaultRequestHeaders.Add("User-Agent", TopstepXUserAgent);
            client.Timeout = TimeSpan.FromSeconds(30);
        });
        services.AddSingleton<TradingBot.Infrastructure.TopstepX.IOrderService>(provider =>
        {
            var logger = provider.GetRequiredService<ILogger<TradingBot.Infrastructure.TopstepX.OrderService>>();
            var appOptions = provider.GetRequiredService<IOptions<AppOptions>>();
            var httpClientFactory = provider.GetRequiredService<IHttpClientFactory>();
            var httpClient = httpClientFactory.CreateClient(nameof(TradingBot.Infrastructure.TopstepX.OrderService));
            
            return new TradingBot.Infrastructure.TopstepX.OrderService(logger, appOptions, httpClient);
        });

        // ========================================================================
        // TOPSTEPX CLIENT - CONFIG-DRIVEN MOCK/REAL SELECTION
        // ========================================================================
        
        // Configure TopstepX client configuration
        services.Configure<TopstepXClientConfiguration>(configuration.GetSection("TopstepXClient"));
        
        // Register TopstepXHttpClient for real client
        services.AddHttpClient("TopstepX", client =>
        {
            client.BaseAddress = new Uri(TopstepXApiBaseUrl);
            client.DefaultRequestHeaders.Add("User-Agent", TopstepXUserAgent);
            client.Timeout = TimeSpan.FromSeconds(30);
        });
        
        // Register TopstepXService for real client
        services.AddSingleton<ITopstepXService, BotCore.Services.TopstepXService>();
        
        // Register the appropriate TopstepX client based on configuration
        services.AddSingleton<ITopstepXClient>(provider =>
        {
            var clientConfig = provider.GetRequiredService<IOptions<TopstepXClientConfiguration>>().Value;
            var logger = provider.GetRequiredService<ILogger<ITopstepXClient>>();
            
            logger.LogInformation("[TOPSTEPX-CLIENT] Initializing client type: {ClientType}, scenario: {Scenario}", 
                clientConfig.ClientType, clientConfig.MockScenario);
            
            if (clientConfig.ClientType.Equals("Mock", StringComparison.OrdinalIgnoreCase))
            {
                var mockLogger = provider.GetRequiredService<ILogger<TradingBot.Infrastructure.TopstepX.MockTopstepXClient>>();
                var mockConfig = provider.GetRequiredService<IOptions<TopstepXClientConfiguration>>();
                
                logger.LogInformation("[TOPSTEPX-CLIENT] Using MockTopstepXClient with scenario: {Scenario}", clientConfig.MockScenario);
                return new TradingBot.Infrastructure.TopstepX.MockTopstepXClient(mockLogger, mockConfig);
            }
            else
            {
                var realLogger = provider.GetRequiredService<ILogger<TradingBot.Infrastructure.TopstepX.RealTopstepXClient>>();
                var topstepXService = provider.GetRequiredService<ITopstepXService>();
                var orderService = provider.GetRequiredService<TradingBot.Infrastructure.TopstepX.IOrderService>();
                var accountService = provider.GetRequiredService<IAccountService>();
                var httpClientFactory = provider.GetRequiredService<IHttpClientFactory>();
                var httpClient = httpClientFactory.CreateClient("TopstepX");
                
                logger.LogInformation("[TOPSTEPX-CLIENT] Using RealTopstepXClient");
                return new TradingBot.Infrastructure.TopstepX.RealTopstepXClient(
                    realLogger, topstepXService, orderService, accountService, httpClient);
            }
        });

        // Configure AppOptions for Safety components
        var appOptions = new AppOptions
        {
            ApiBase = Environment.GetEnvironmentVariable("TOPSTEPX_API_BASE") ?? TopstepXApiBaseUrl,
            AuthToken = Environment.GetEnvironmentVariable("TOPSTEPX_JWT") ?? "",
            AccountId = Environment.GetEnvironmentVariable("TOPSTEPX_ACCOUNT_ID") ?? "",
            EnableDryRunMode = Environment.GetEnvironmentVariable("ENABLE_DRY_RUN") != "false",
            EnableAutoExecution = Environment.GetEnvironmentVariable("ENABLE_AUTO_EXECUTION") == "true",
            MaxDailyLoss = decimal.Parse(Environment.GetEnvironmentVariable("MAX_DAILY_LOSS") ?? "-1000"),
            MaxPositionSize = int.Parse(Environment.GetEnvironmentVariable("MAX_POSITION_SIZE") ?? "5"),
            DrawdownLimit = decimal.Parse(Environment.GetEnvironmentVariable("DRAWDOWN_LIMIT") ?? "-2000"),
            KillFile = Environment.GetEnvironmentVariable("KILL_FILE") ?? Path.Combine(Directory.GetCurrentDirectory(), "kill.txt")
        };
        services.AddSingleton<IOptions<AppOptions>>(provider => Options.Create(appOptions));

        // Configure workflow scheduling options
        services.Configure<WorkflowSchedulingOptions>(configuration.GetSection("WorkflowScheduling"));
        
        // Configure Python integration options with platform-aware paths
        services.Configure<PythonIntegrationOptions>(options =>
        {
            options.Enabled = Environment.GetEnvironmentVariable("ENABLE_PYTHON_INTEGRATION") != "false";
            options.PythonPath = Environment.GetEnvironmentVariable("PYTHON_EXECUTABLE") ?? 
                (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? "python.exe" : "/usr/bin/python3");
            
            // Fix: Resolve WorkingDirectory relative to project content root, not binary output directory
            var workingDir = Environment.GetEnvironmentVariable("PYTHON_WORKING_DIR") ?? "./python";
            if (!Path.IsPathRooted(workingDir))
            {
                workingDir = Path.GetFullPath(Path.Combine(hostContext.HostingEnvironment.ContentRootPath, workingDir));
            }
            options.WorkingDirectory = workingDir;
            
            options.ScriptPaths = new Dictionary<string, string>
            {
                ["decisionService"] = "./python/decision_service/simple_decision_service.py",
                ["modelInference"] = "./python/ucb/neural_ucb_topstep.py"
            };
            options.Timeout = int.Parse(Environment.GetEnvironmentVariable("PYTHON_TIMEOUT") ?? "30");
        });
        
        // Configure model loading options
        services.Configure<ModelLoadingOptions>(configuration.GetSection("ModelLoading"));

        // General HTTP client for dependency injection
        services.AddHttpClient();

        // Core HTTP client for TopstepX API
        services.AddHttpClient<TopstepAuthAgent>(client =>
        {
            client.BaseAddress = new Uri(TopstepXApiBaseUrl);
            client.DefaultRequestHeaders.Add("User-Agent", TopstepXUserAgent);
            client.Timeout = TimeSpan.FromSeconds(30); // Prevent hanging on network issues
        });

        // Register the CENTRAL MESSAGE BUS - The "ONE BRAIN" communication system
        services.AddSingleton<ICentralMessageBus, CentralMessageBus>();

        // Register required interfaces with REAL Safety implementations
        services.AddSingleton<IKillSwitchWatcher, Trading.Safety.KillSwitchWatcher>();
        services.AddSingleton<IRiskManager, Trading.Safety.RiskManager>();
        services.AddSingleton<IHealthMonitor, Trading.Safety.HealthMonitor>();

        // ================================================================================
        // REAL SOPHISTICATED ORCHESTRATORS - NO FAKE IMPLEMENTATIONS
        // ================================================================================
        
        // Register the REAL sophisticated orchestrators
        services.AddSingleton<TradingBot.Abstractions.ITradingOrchestrator, TradingOrchestratorService>();
        services.AddSingleton<TradingBot.Abstractions.IIntelligenceOrchestrator, IntelligenceOrchestratorService>();  
        services.AddSingleton<TradingBot.Abstractions.IDataOrchestrator, DataOrchestratorService>();
        services.AddHostedService<UnifiedOrchestratorService>();

        // NO MORE FAKE MasterOrchestrator - using REAL sophisticated services only

        // ================================================================================
        // AI/ML TRADING BRAIN REGISTRATION - DUAL ML APPROACH WITH UCB
        // ================================================================================
        
        // Register UnifiedTradingBrain - The main AI brain (1,027+ lines)
        services.AddSingleton<BotCore.Brain.UnifiedTradingBrain>();
        
        // Register UCB Manager - C# client for Python UCB service (175 lines)
        services.AddSingleton<BotCore.ML.UCBManager>();
        
        // Register ML Memory Manager - Sophisticated ML model management (458 lines)
        services.AddSingleton<BotCore.ML.OnnxModelLoader>();
        services.AddSingleton<BotCore.ML.IMLMemoryManager, BotCore.ML.MLMemoryManager>();

        // ================================================================================
        // üèÜ CHAMPION/CHALLENGER ARCHITECTURE - SAFE MODEL MANAGEMENT üèÜ
        // ================================================================================
        
        // Register Model Registry for versioned, immutable artifacts
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IModelRegistry, TradingBot.UnifiedOrchestrator.Runtime.FileModelRegistry>();
        
        // Register Atomic Model Router Factory for lock-free champion access
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IModelRouterFactory, TradingBot.UnifiedOrchestrator.Runtime.ModelRouterFactory>();
        
        // Register Read-Only Inference Brain (replaces shared mutable UnifiedTradingBrain)
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IInferenceBrain, TradingBot.UnifiedOrchestrator.Brains.InferenceBrain>();
        
        // Register Write-Only Training Brain for isolated challenger creation
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.ITrainingBrain, TradingBot.UnifiedOrchestrator.Brains.TrainingBrain>();
        
        // Register Artifact Builders for ONNX and UCB serialization
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IArtifactBuilder, TradingBot.UnifiedOrchestrator.Artifacts.OnnxArtifactBuilder>();
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IArtifactBuilder, TradingBot.UnifiedOrchestrator.Artifacts.UcbSerializer>();
        
        // Register Market Hours Service for timing gates
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IMarketHoursService, TradingBot.UnifiedOrchestrator.Scheduling.FuturesMarketHours>();
        
        // Register Shadow Tester for A/B validation
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IShadowTester, TradingBot.UnifiedOrchestrator.Promotion.ShadowTester>();
        
        // Register Position Service for flat validation
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Promotion.IPositionService, TradingBot.UnifiedOrchestrator.Promotion.MockPositionService>();
        
        // Register Promotion Service with atomic swaps and instant rollback
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IPromotionService, TradingBot.UnifiedOrchestrator.Promotion.PromotionService>();
        
        // Register Production Validation Service for runtime proof
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IValidationService, TradingBot.UnifiedOrchestrator.Services.ProductionValidationService>();
        
        // Register Rollback Drill Service for rollback evidence under load
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IRollbackDrillService, TradingBot.UnifiedOrchestrator.Services.RollbackDrillService>();
        
        // Register Trading Brain Adapter for UnifiedTradingBrain parity
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.ITradingBrainAdapter, TradingBot.UnifiedOrchestrator.Brains.TradingBrainAdapter>();
        
        // Register Unified Data Integration Service for historical + live data
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IUnifiedDataIntegrationService, TradingBot.UnifiedOrchestrator.Services.UnifiedDataIntegrationService>();
        services.AddHostedService<TradingBot.UnifiedOrchestrator.Services.UnifiedDataIntegrationService>();
        
        // Register Production Readiness Validation Service for complete runtime proof
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Interfaces.IProductionReadinessValidationService, TradingBot.UnifiedOrchestrator.Services.ProductionReadinessValidationService>();
        
        // Register Production Demonstration Runner for PR review artifacts
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Services.ProductionDemonstrationRunner>();
        
        // Register specialized validation services for PR review requirements
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Services.EnumMappingValidationService>();
        services.AddSingleton<TradingBot.UnifiedOrchestrator.Services.ValidationReportRegressionService>();
        
        // Register Validation Service for demonstration
        services.AddHostedService<TradingBot.UnifiedOrchestrator.Services.ChampionChallengerValidationService>();
        
        Console.WriteLine("üèÜ Champion/Challenger Architecture registered successfully - Live trading inference now read-only with atomic model swaps");
        Console.WriteLine("‚úÖ Production Readiness Services registered - Ready for runtime validation and artifact generation");
        
        // ================================================================================
        
        // ================================================================================
        // CRITICAL SAFETY SYSTEMS - PRODUCTION TRADING SAFETY
        // ================================================================================
        
        // Register EmergencyStopSystem (209 lines) from Safety project
        services.AddSingleton<TopstepX.Bot.Core.Services.EmergencyStopSystem>();
        
        // Register ErrorHandlingMonitoringSystem (529 lines) from BotCore  
        services.AddSingleton<TopstepX.Bot.Core.Services.ErrorHandlingMonitoringSystem>();
        
        // OrderFillConfirmationSystem (520 lines) - Now uses shared SignalR connections
        // Configure OrderFillConfirmationSystem to use shared SignalR connections via SignalRConnectionManager
        services.AddSingleton<TopstepX.Bot.Core.Services.OrderFillConfirmationSystem>(provider =>
        {
            var logger = provider.GetRequiredService<ILogger<TopstepX.Bot.Core.Services.OrderFillConfirmationSystem>>();
            var httpClient = provider.GetRequiredService<HttpClient>();
            var positionTracker = provider.GetRequiredService<TopstepX.Bot.Core.Services.PositionTrackingSystem>();
            var emergencyStop = provider.GetRequiredService<TopstepX.Bot.Core.Services.EmergencyStopSystem>();
            var signalRConnectionManager = provider.GetRequiredService<ISignalRConnectionManager>();
            
            // Use the new constructor that accepts ISignalRConnectionManager for shared connections
            return new TopstepX.Bot.Core.Services.OrderFillConfirmationSystem(
                logger, httpClient, signalRConnectionManager, positionTracker, emergencyStop);
        });
        
        // Register PositionTrackingSystem (379 lines) from Safety project
        services.AddSingleton<TopstepX.Bot.Core.Services.PositionTrackingSystem>();
        
        // Register TradingSystemIntegrationService (533 lines) from BotCore as HOSTED SERVICE for live TopstepX connection
        // Configure TradingSystemIntegrationService for live TopstepX connection
        services.AddSingleton<TopstepX.Bot.Core.Services.TradingSystemIntegrationService.TradingSystemConfiguration>(serviceProvider =>
        {
            var topstepXConfig = configuration.GetSection("TopstepX");
            return new TopstepX.Bot.Core.Services.TradingSystemIntegrationService.TradingSystemConfiguration
            {
                TopstepXApiBaseUrl = topstepXConfig["ApiBaseUrl"] ?? Environment.GetEnvironmentVariable("TOPSTEPX_API_BASE") ?? TopstepXApiBaseUrl,
                UserHubUrl = topstepXConfig["UserHubUrl"] ?? Environment.GetEnvironmentVariable("RTC_USER_HUB") ?? "https://rtc.topstepx.com/hubs/user",
                MarketHubUrl = topstepXConfig["MarketHubUrl"] ?? Environment.GetEnvironmentVariable("RTC_MARKET_HUB") ?? "https://rtc.topstepx.com/hubs/market",
                AccountId = Environment.GetEnvironmentVariable("TOPSTEPX_ACCOUNT_ID") ?? "",
                ApiToken = Environment.GetEnvironmentVariable("TOPSTEPX_JWT") ?? "",
                EnableDryRunMode = Environment.GetEnvironmentVariable("ENABLE_DRY_RUN") != "false",
                EnableAutoExecution = Environment.GetEnvironmentVariable("ENABLE_AUTO_EXECUTION") == "true",
                MaxDailyLoss = decimal.Parse(Environment.GetEnvironmentVariable("DAILY_LOSS_CAP_R") ?? "-1000"),
                MaxPositionSize = decimal.Parse(Environment.GetEnvironmentVariable("MAX_POSITION_SIZE") ?? "5")
            };
        });

        // Register JWT token provider function for backward compatibility with existing services
        services.AddSingleton<Func<Task<string?>>>(serviceProvider =>
        {
            var tokenProvider = serviceProvider.GetRequiredService<ITokenProvider>();
            return async () => await tokenProvider.GetTokenAsync();
        });

        // NOTE: AutoTopstepXLoginService registration disabled due to type resolution issues
        // Will be re-enabled once dependency injection is properly configured
        services.AddHostedService<TopstepX.Bot.Core.Services.TradingSystemIntegrationService>();
        
        // ================================================================================
        // ADVANCED INFRASTRUCTURE - ML/DATA MANAGEMENT  
        // ================================================================================
        
        // Register WorkflowOrchestrationManager (466 lines)
        services.AddSingleton<WorkflowOrchestrationManager>();
        
        // Register EconomicEventManager (452 lines)
        services.AddSingleton<BotCore.Market.IEconomicEventManager, BotCore.Market.EconomicEventManager>();
        
        // Register RedundantDataFeedManager (442 lines)
        services.AddSingleton<BotCore.Market.RedundantDataFeedManager>();
        
        // Register AdvancedSystemIntegrationService (386 lines)
        services.AddSingleton<AdvancedSystemIntegrationService>();
        
        // ================================================================================
        // ML/RL DECISION SERVICE INTEGRATION - FULLY AUTOMATED
        // ================================================================================
        
        // Configure Decision Service options from environment
        var decisionServiceLauncherOptions = new DecisionServiceLauncherOptions
        {
            Enabled = Environment.GetEnvironmentVariable("ENABLE_DECISION_SERVICE") != "false",
            Host = Environment.GetEnvironmentVariable("DECISION_SERVICE_HOST") ?? "127.0.0.1",
            Port = int.Parse(Environment.GetEnvironmentVariable("DECISION_SERVICE_PORT") ?? "7080"),
            PythonExecutable = Environment.GetEnvironmentVariable("PYTHON_EXECUTABLE") ?? "python",
            ScriptPath = Environment.GetEnvironmentVariable("DECISION_SERVICE_SCRIPT") ?? "",
            ConfigFile = Environment.GetEnvironmentVariable("DECISION_SERVICE_CONFIG") ?? "decision_service_config.yaml",
            StartupTimeoutSeconds = int.Parse(Environment.GetEnvironmentVariable("DECISION_SERVICE_STARTUP_TIMEOUT") ?? "30"),
            AutoRestart = Environment.GetEnvironmentVariable("DECISION_SERVICE_AUTO_RESTART") != "false"
        };
        services.Configure<DecisionServiceLauncherOptions>(options =>
        {
            options.Enabled = decisionServiceLauncherOptions.Enabled;
            options.Host = decisionServiceLauncherOptions.Host;
            options.Port = decisionServiceLauncherOptions.Port;
            options.PythonExecutable = decisionServiceLauncherOptions.PythonExecutable;
            options.ScriptPath = decisionServiceLauncherOptions.ScriptPath;
            options.ConfigFile = decisionServiceLauncherOptions.ConfigFile;
            options.StartupTimeoutSeconds = decisionServiceLauncherOptions.StartupTimeoutSeconds;
            options.AutoRestart = decisionServiceLauncherOptions.AutoRestart;
        });
        
        // Configure Decision Service client options
        var decisionServiceOptions = new DecisionServiceOptions
        {
            BaseUrl = $"http://{decisionServiceLauncherOptions.Host}:{decisionServiceLauncherOptions.Port}",
            TimeoutMs = int.Parse(Environment.GetEnvironmentVariable("DECISION_SERVICE_TIMEOUT_MS") ?? "5000"),
            Enabled = decisionServiceLauncherOptions.Enabled,
            MaxRetries = int.Parse(Environment.GetEnvironmentVariable("DECISION_SERVICE_MAX_RETRIES") ?? "3")
        };
        services.Configure<DecisionServiceOptions>(options =>
        {
            options.BaseUrl = decisionServiceOptions.BaseUrl;
            options.TimeoutMs = decisionServiceOptions.TimeoutMs;
            options.Enabled = decisionServiceOptions.Enabled;
            options.MaxRetries = decisionServiceOptions.MaxRetries;
        });
        
        // Configure Decision Service integration options
        services.Configure<DecisionServiceIntegrationOptions>(options =>
        {
            options.Enabled = decisionServiceLauncherOptions.Enabled;
            options.HealthCheckIntervalSeconds = int.Parse(Environment.GetEnvironmentVariable("DECISION_SERVICE_HEALTH_CHECK_INTERVAL") ?? "30");
            options.LogDecisionLines = Environment.GetEnvironmentVariable("LOG_DECISION_LINES") != "false";
            options.EnableTradeManagement = Environment.GetEnvironmentVariable("ENABLE_TRADE_MANAGEMENT") != "false";
        });
        
        // Register Decision Service components
        services.AddHttpClient<DecisionServiceClient>();
        services.AddSingleton<DecisionServiceClient>(provider =>
        {
            var httpClient = provider.GetRequiredService<HttpClient>();
            var decisionServiceOptions = provider.GetRequiredService<IOptions<DecisionServiceOptions>>().Value;
            var pythonOptions = provider.GetRequiredService<IOptions<PythonIntegrationOptions>>().Value;
            var logger = provider.GetRequiredService<ILogger<DecisionServiceClient>>();
            return new DecisionServiceClient(decisionServiceOptions, httpClient, pythonOptions, logger);
        });
        services.AddSingleton<DecisionServiceLauncher>();
        services.AddSingleton<DecisionServiceIntegration>();
        
        // Register as hosted services for automatic startup/shutdown
        services.AddHostedService<DecisionServiceLauncher>();
        services.AddHostedService<DecisionServiceIntegration>();
        
        // Register feature demonstration service
        services.AddHostedService<FeatureDemonstrationService>();
        
        // ================================================================================
        // AUTHENTICATION & TOPSTEPX SERVICES
        // ================================================================================
        
        // NOTE: TopstepX authentication services registered elsewhere to avoid conflicts
        
        // ================================================================================
        // CORE BOTCORE SERVICES REGISTRATION - ALL SOPHISTICATED SERVICES
        // ================================================================================
        
        // Core BotCore Services - ALL sophisticated implementations with proper dependencies
        
        // Register services that have interfaces first
        
        // Register authentication and credential management services from Infrastructure.TopstepX
        services.AddSingleton<TopstepXCredentialManager>();
        
        // NOTE: AutoTopstepXLoginService registration handled elsewhere to avoid duplicates
        
        // Register ALL critical system components that exist in BotCore
        try 
        {
            // Add required interfaces and implementations first
            
            // Register fallback implementations for required interfaces
            // This prevents dependency injection errors
            try
            {
                // Try to register sophisticated services, with fallbacks for missing dependencies
                
                // Register EmergencyStopSystem (fewer dependencies) from BotCore
                services.TryAddSingleton<TopstepX.Bot.Core.Services.EmergencyStopSystem>();
                
                // Register services with fewer dependencies first
                services.TryAddSingleton<BotCore.Services.PerformanceTracker>();
                services.TryAddSingleton<BotCore.Services.TradingProgressMonitor>();
                services.TryAddSingleton<BotCore.Services.TimeOptimizedStrategyManager>();
                // NOTE: TopstepXService disabled to avoid SignalR connection conflicts
                services.TryAddSingleton<TopstepX.Bot.Intelligence.LocalBotMechanicIntegration>();
                
                
                // Try to register more complex services (these might fail due to missing dependencies)
                try 
                {
                    // services.TryAddSingleton<BotCore.Services.ES_NQ_CorrelationManager>();
                    // services.TryAddSingleton<BotCore.Services.ES_NQ_PortfolioHeatManager>();
                    services.TryAddSingleton<TopstepX.Bot.Core.Services.ErrorHandlingMonitoringSystem>();
                    services.TryAddSingleton<BotCore.Services.ExecutionAnalyzer>();
                    // OrderFillConfirmationSystem already registered above with proper factory
                    services.TryAddSingleton<TopstepX.Bot.Core.Services.PositionTrackingSystem>();
                    services.TryAddSingleton<BotCore.Services.NewsIntelligenceEngine>();
                    services.TryAddSingleton<BotCore.Services.ZoneService>();
                    services.TryAddSingleton<BotCore.EnhancedTrainingDataService>();
                    services.TryAddSingleton<TopstepX.Bot.Core.Services.TradingSystemIntegrationService>();
                    
                }
                catch (Exception ex)
                {
                    // Non-critical service registration failures are logged but don't stop initialization
                    Console.WriteLine($"Warning: Failed to register complex services: {ex.Message}");
                }
                
            }
            catch (Exception ex)
            {
                // Service registration failures are expected for optional components
                Console.WriteLine($"Warning: Failed to register some BotCore services: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            // Top-level service registration errors are logged but shouldn't crash the application
            Console.WriteLine($"Warning: Some service registrations failed: {ex.Message}");
        }

        // ================================================================================
        // INTELLIGENCE STACK INTEGRATION - ML/RL/ONLINE LEARNING 
        // ================================================================================
        
        // Register the complete intelligence stack with all new features
        RegisterIntelligenceStackServices(services, configuration);

        // Register the core unified trading brain
        services.AddSingleton<BotCore.Brain.UnifiedTradingBrain>();
        
        // ================================================================================
        // ADVANCED ML/AI SERVICES REGISTRATION - ALL MACHINE LEARNING SYSTEMS  
        // ================================================================================
        
        // Register advanced ML/AI system components using extension methods
        services.AddSingleton<BotCore.ML.IMLMemoryManager, BotCore.ML.MLMemoryManager>();
        services.AddSingleton<BotCore.Market.RedundantDataFeedManager>();
        services.AddSingleton<BotCore.Market.IEconomicEventManager, BotCore.Market.EconomicEventManager>();
        
        // ================================================================================
        // PRODUCTION CVaR-PPO INTEGRATION - REAL RL POSITION SIZING
        // ================================================================================
        
        // Register CVaR-PPO configuration
        services.AddSingleton<TradingBot.RLAgent.CVaRPPOConfig>(provider =>
        {
            return new TradingBot.RLAgent.CVaRPPOConfig
            {
                StateSize = 16, // Match UnifiedTradingBrain state vector
                ActionSize = 4, // No position, Small, Medium, Large
                HiddenSize = 128,
                LearningRate = 3e-4,
                Gamma = 0.99,
                Lambda = 0.95,
                ClipEpsilon = 0.2,
                EntropyCoeff = 0.01,
                CVaRAlpha = 0.05, // 5% tail risk for TopStep compliance
                BatchSize = 64,
                PPOEpochs = 4,
                MinExperiencesForTraining = 256,
                MaxExperienceBuffer = 10000
            };
        });
        
        // Register CVaR-PPO directly for proper type injection
        services.AddSingleton<TradingBot.RLAgent.CVaRPPO>(provider =>
        {
            var logger = provider.GetRequiredService<ILogger<TradingBot.RLAgent.CVaRPPO>>();
            var config = provider.GetRequiredService<TradingBot.RLAgent.CVaRPPOConfig>();
            var modelPath = Path.Combine("models", "rl", "cvar_ppo_agent.onnx");
            
            var cvarPPO = new TradingBot.RLAgent.CVaRPPO(logger, config, modelPath);
            
            // Initialize the CVaR-PPO agent
            _ = Task.Run(() =>
            {
                try
                {
                    // CVaRPPO initializes automatically in constructor
                    logger.LogInformation("üéØ [CVAR-PPO] Production RL agent initialized successfully");
                }
                catch (Exception ex)
                {
                    logger.LogWarning(ex, "‚ö†Ô∏è [CVAR-PPO] Failed to load trained model, using default initialization");
                }
            });
            
            return cvarPPO;
        });

        // Register FeatureConfig and FeatureEngineering - REQUIRED for TradingSystemIntegrationService
        services.AddSingleton<TradingBot.RLAgent.FeatureConfig>(provider => 
        {
            return new TradingBot.RLAgent.FeatureConfig
            {
                MaxBufferSize = 1000,
                TopKFeatures = 10,
                StreamingStaleThresholdSeconds = 30,
                StreamingCleanupAfterMinutes = 30,
                DefaultProfile = new TradingBot.RLAgent.RegimeProfile
                {
                    VolatilityLookback = 20,
                    TrendLookback = 50,
                    VolumeLookback = 20,
                    RsiLookback = 14,
                    BollingerLookback = 20,
                    AtrLookback = 14,
                    MicrostructureLookback = 100,
                    OrderFlowLookback = 50,
                    TradeDirectionDecay = 0.9
                }
            };
        });
        services.AddSingleton<TradingBot.RLAgent.FeatureEngineering>();
        
        services.AddSingleton<BotCore.ML.StrategyMlModelManager>(provider =>
        {
            var logger = provider.GetRequiredService<ILogger<BotCore.ML.StrategyMlModelManager>>();
            var memoryManager = provider.GetService<BotCore.ML.IMLMemoryManager>();
            return new BotCore.ML.StrategyMlModelManager(logger, memoryManager);
        });

        // ================================================================================
        // ÔøΩÔ∏è PRODUCTION-GRADE INFRASTRUCTURE SERVICES üõ°Ô∏è
        // ================================================================================
        
        // Register Production Configuration Service - Environment-specific settings
        services.Configure<BotCore.Services.ProductionTradingConfig>(configuration.GetSection("TradingBot"));
        services.AddSingleton<BotCore.Services.ProductionConfigurationService>();
        
        // Register Production Resilience Service - Retry logic, circuit breakers, graceful degradation
        services.Configure<BotCore.Services.ResilienceConfig>(configuration.GetSection("Resilience"));
        services.AddSingleton<BotCore.Services.ProductionResilienceService>();
        
        // Register Production Monitoring Service - Health checks, metrics, performance tracking
        services.AddSingleton<BotCore.Services.ProductionMonitoringService>();
        services.AddHealthChecks()
            .AddCheck<BotCore.Services.ProductionMonitoringService>("ml-rl-system");

        // ================================================================================
        // ÔøΩüöÄ ENHANCED ML/RL/CLOUD INTEGRATION SERVICES - PRODUCTION AUTOMATION üöÄ
        // ================================================================================
        
        // Register Cloud Model Synchronization Service - Automated GitHub model downloads
        services.AddSingleton<BotCore.Services.CloudModelSynchronizationService>();
        services.AddHostedService<BotCore.Services.CloudModelSynchronizationService>(provider => 
            provider.GetRequiredService<BotCore.Services.CloudModelSynchronizationService>());
        
        // Register Model Ensemble Service - Intelligent model blending (70% cloud, 30% local)
        services.AddSingleton<BotCore.Services.ModelEnsembleService>();
        
        // Register Trading Feedback Service - Automated learning loops and retraining triggers
        services.AddSingleton<BotCore.Services.TradingFeedbackService>();
        services.AddHostedService<BotCore.Services.TradingFeedbackService>(provider => 
            provider.GetRequiredService<BotCore.Services.TradingFeedbackService>());
        
        // Register Enhanced Trading Brain Integration - Coordinates all ML/RL/Cloud services
        services.AddSingleton<BotCore.Services.EnhancedTradingBrainIntegration>();
        
        Console.WriteLine("üöÄ [ENHANCED-BRAIN] Production ML/RL/Cloud automation services registered successfully!");
        
        // ================================================================================
        
        // Register BotCore LocalBotMechanicIntegration service if available  
        try
        {
            // Note: LocalBotMechanicIntegration exists in Intelligence folder, not BotCore.Services
            // Will integrate this separately when Intelligence folder is properly referenced
        }
        catch (Exception ex)
        {
            // LocalBotMechanicIntegration registration failures are non-critical
            Console.WriteLine($"Warning: LocalBotMechanicIntegration registration failed: {ex.Message}");
        }
        
        // Register core agents and clients that exist in BotCore
        // NOTE: Hub-creating services disabled to avoid conflicts with SignalRConnectionManager
        
        services.AddSingleton<BotCore.PositionAgent>();
        
        // NOTE: MarketDataAgent disabled - functionality provided by SignalRConnectionManager events
        services.AddSingleton<BotCore.ModelUpdaterService>();
        
        // Register advanced orchestrator services that will be coordinated by MasterOrchestrator
        services.AddSingleton<TradingOrchestratorService>();
        services.AddSingleton<IntelligenceOrchestratorService>();
        services.AddSingleton<DataOrchestratorService>();
        services.AddSingleton<WorkflowSchedulerService>();
        services.AddSingleton<WorkflowOrchestrationManager>();
        services.AddSingleton<AdvancedSystemIntegrationService>();

        // Register Python UCB Service Launcher - Auto-start Python UCB FastAPI service
        services.AddHostedService<PythonUcbLauncher>();
        
        // Register UCB Manager - Auto-detect if UCB service is available
        var enableUcb = Environment.GetEnvironmentVariable("ENABLE_UCB") != "0"; // Default to enabled
        
        if (enableUcb)
        {
            services.AddSingleton<BotCore.ML.UCBManager>();
        }

        // Auto-detect paper trading mode
        var hasCredentials = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("TOPSTEPX_JWT")) ||
                           (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable("TOPSTEPX_USERNAME")) &&
                            !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("TOPSTEPX_API_KEY")));

        if (hasCredentials)
        {
            // Register distributed orchestrators for sophisticated trading system
            services.AddSingleton<TradingBot.Abstractions.ITradingOrchestrator, TradingOrchestratorService>();
        }
        
        // Register distributed orchestrator components for sophisticated system
        services.AddSingleton<TradingBot.Abstractions.IIntelligenceOrchestrator, IntelligenceOrchestratorService>();
        services.AddSingleton<TradingBot.Abstractions.IDataOrchestrator, DataOrchestratorService>();
        services.AddSingleton<TradingBot.Abstractions.IWorkflowScheduler, WorkflowSchedulerService>();
        
        // Register Cloud Data Integration - Links 27 GitHub workflows to trading decisions
        services.AddSingleton<TradingBot.Abstractions.ICloudDataIntegration, CloudDataIntegrationService>();

        // ================================================================================
        // ADVANCED SYSTEM INITIALIZATION SERVICE
        // ================================================================================
        
        // Register the advanced system initialization service to wire everything together
        services.AddHostedService<AdvancedSystemInitializationService>();

        // Register the main unified orchestrator service
        services.AddSingleton<UnifiedOrchestratorService>();
        services.AddSingleton<TradingBot.Abstractions.IUnifiedOrchestrator>(provider => provider.GetRequiredService<UnifiedOrchestratorService>());
        services.AddHostedService(provider => provider.GetRequiredService<UnifiedOrchestratorService>());

    }

    /// <summary>
    /// Register Intelligence Stack services with real implementations
    /// </summary>
    private static void RegisterIntelligenceStackServices(IServiceCollection services, IConfiguration configuration)
    {

        // Register the real intelligence stack services
        services.AddIntelligenceStack(configuration);

    }

}

/// <summary>
/// Hosted service that initializes all advanced system components during startup
/// This ensures everything is properly integrated into the unified orchestrator brain
/// </summary>
public class AdvancedSystemInitializationService : IHostedService
{
    private readonly ILogger<AdvancedSystemInitializationService> _logger;
    private readonly IServiceProvider _serviceProvider;

    public AdvancedSystemInitializationService(
        ILogger<AdvancedSystemInitializationService> logger,
        IServiceProvider serviceProvider)
    {
        _logger = logger;
        _serviceProvider = serviceProvider;
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("üöÄ Advanced System Initialization Service starting");
        
        try
        {
            // Initialize intelligence system components first
            var intelligenceOrchestrator = _serviceProvider.GetService<TradingBot.Abstractions.IIntelligenceOrchestrator>();
            if (intelligenceOrchestrator != null)
            {
                _logger.LogInformation("üß† Initializing Intelligence Orchestrator...");
                // Intelligence orchestrator initialization handled internally
            }

            _logger.LogInformation("‚úÖ Advanced System Initialization completed successfully");
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Advanced System Initialization failed");
            return Task.FromException(ex);
        }
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("üõë Advanced System Initialization Service stopping");
        return Task.CompletedTask;
    }
}

public static class EnvironmentLoader
{
    /// <summary>
    /// Load environment files in priority order to auto-detect TopstepX credentials
    /// Priority: .env.local > .env > system environment variables
    /// </summary>
    public static void LoadEnvironmentFiles()
    {
        var rootPath = Path.Combine(Directory.GetCurrentDirectory(), "..", "..");
        var currentPath = Directory.GetCurrentDirectory();

        var envFiles = new[]
        {
            Path.Combine(rootPath, ".env"),           // Root configuration
            Path.Combine(currentPath, ".env"),        // Local overrides
            Path.Combine(rootPath, ".env.local"),     // Local credentials (highest priority)
            Path.Combine(currentPath, ".env.local")   // Project-local credentials
        };

        var loadedFiles = new List<string>();
        
        foreach (var envFile in envFiles)
        {
            try
            {
                if (File.Exists(envFile))
                {
                    Env.Load(envFile);
                    loadedFiles.Add(envFile);
                }
            }
            catch (Exception ex)
            {
                // Environment file loading errors are non-critical, continue with defaults
                Console.WriteLine($"Warning: Failed to load environment file {envFile}: {ex.Message}");
            }
        }

        if (loadedFiles.Count == 0)
        {
            Console.WriteLine("No environment files found, using system environment variables only");
        }
        else
        {
            
            // Check if TopstepX credentials are available
            var username = Environment.GetEnvironmentVariable("TOPSTEPX_USERNAME");
            var apiKey = Environment.GetEnvironmentVariable("TOPSTEPX_API_KEY");
            
            if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(apiKey))
            {
                Console.WriteLine("TopstepX credentials detected and loaded");
            }
            else
            {
                Console.WriteLine("No TopstepX credentials found - will attempt to use JWT token if available");
            }
        }
    }
}
