using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace OrchestratorAgent.Intelligence
{
    /// <summary>
    /// Service that integrates with GitHub Actions workflows to consume ML/RL intelligence
    /// and trigger workflow executions from the C# trading bot.
    /// </summary>
    public class WorkflowIntegrationService
    {
        private readonly HttpClient _httpClient;
        private readonly ILogger<WorkflowIntegrationService> _logger;
        private readonly string _baseDataPath = null!;
        private readonly string _githubToken = null!;

        public WorkflowIntegrationService(ILogger<WorkflowIntegrationService> logger)
        {
            _logger = logger;
            _httpClient = new HttpClient();
            _baseDataPath = Path.Combine(AppContext.BaseDirectory, "Intelligence", "data");
            _githubToken = Environment.GetEnvironmentVariable("GITHUB_TOKEN") ?? "";
            
            // Set up GitHub API headers if token is available
            if (!string.IsNullOrEmpty(_githubToken))
            {
                _httpClient.DefaultRequestHeaders.Add("Authorization", $"token {_githubToken}");
                _httpClient.DefaultRequestHeaders.Add("User-Agent", "TradingBot-WorkflowIntegration");
            }
        }

        /// <summary>
        /// Reads the latest market intelligence data generated by GitHub Actions workflows
        /// </summary>
        public async Task<MarketIntelligence?> GetLatestMarketIntelligenceAsync()
        {
            try
            {
                var intelligencePath = Path.Combine(_baseDataPath, "integrated", "latest_intelligence.json");
                if (!File.Exists(intelligencePath))
                {
                    _logger.LogDebug("No intelligence file found at {Path}", intelligencePath);
                    return null;
                }

                var jsonContent = await File.ReadAllTextAsync(intelligencePath).ConfigureAwait(false).ConfigureAwait(false);
                var data = JsonSerializer.Deserialize<MarketIntelligence>(jsonContent);
                
                _logger.LogInformation("Loaded market intelligence: Regime={Regime}, Confidence={Confidence}, Bias={Bias}", 
                    data?.Regime, data?.Confidence, data?.PrimaryBias);
                
                return data;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to load market intelligence");
                return null;
            }
        }

        /// <summary>
        /// Reads the latest correlation analysis between ES/NQ and other instruments
        /// </summary>
        public async Task<CorrelationData?> GetLatestCorrelationDataAsync()
        {
            try
            {
                var correlationPath = Path.Combine(_baseDataPath, "correlations", "latest_correlations.json");
                if (!File.Exists(correlationPath))
                {
                    _logger.LogDebug("No correlation file found at {Path}", correlationPath);
                    return null;
                }

                var jsonContent = await File.ReadAllTextAsync(correlationPath).ConfigureAwait(false).ConfigureAwait(false);
                var data = JsonSerializer.Deserialize<CorrelationData>(jsonContent);
                
                _logger.LogDebug("Loaded correlation data with {Count} instrument correlations", 
                    data?.Correlations?.Count ?? 0);
                
                return data;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to load correlation data");
                return null;
            }
        }

        /// <summary>
        /// Reads the latest supply/demand zone analysis
        /// </summary>
        public async Task<ZoneAnalysis?> GetLatestZoneAnalysisAsync(string symbol)
        {
            try
            {
                var zonePath = Path.Combine(_baseDataPath, "zones", $"{symbol.ToLower()}_zones.json");
                if (!File.Exists(zonePath))
                {
                    _logger.LogDebug("No zone file found for {Symbol} at {Path}", symbol, zonePath);
                    return null;
                }

                var jsonContent = await File.ReadAllTextAsync(zonePath).ConfigureAwait(false).ConfigureAwait(false);
                var data = JsonSerializer.Deserialize<ZoneAnalysis>(jsonContent);
                
                _logger.LogDebug("Loaded zone analysis for {Symbol}: {SupplyCount} supply, {DemandCount} demand zones", 
                    symbol, data?.SupplyZones?.Count ?? 0, data?.DemandZones?.Count ?? 0);
                
                return data;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to load zone analysis for {Symbol}", symbol);
                return null;
            }
        }

        /// <summary>
        /// Reads the latest sentiment analysis from news and social media
        /// </summary>
        public async Task<SentimentData?> GetLatestSentimentAsync()
        {
            try
            {
                var sentimentPath = Path.Combine(_baseDataPath, "sentiment", "latest_sentiment.json");
                if (!File.Exists(sentimentPath))
                {
                    _logger.LogDebug("No sentiment file found at {Path}", sentimentPath);
                    return null;
                }

                var jsonContent = await File.ReadAllTextAsync(sentimentPath).ConfigureAwait(false).ConfigureAwait(false);
                var data = JsonSerializer.Deserialize<SentimentData>(jsonContent);
                
                _logger.LogDebug("Loaded sentiment data: Score={Score}, Sources={Sources}", 
                    data?.OverallScore, data?.Sources?.Count ?? 0);
                
                return data;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to load sentiment data");
                return null;
            }
        }

        /// <summary>
        /// Triggers a GitHub Actions workflow to update market intelligence
        /// </summary>
        public async Task<bool> TriggerWorkflowAsync(string workflowName, object? inputs = null, CancellationToken cancellationToken = default)
        {
            try
            {
                if (string.IsNullOrEmpty(_githubToken))
                {
                    _logger.LogWarning("No GitHub token available, cannot trigger workflow {Workflow}", workflowName);
                    return false;
                }

                var repoOwner = Environment.GetEnvironmentVariable("GITHUB_OWNER") ?? "your-username";
                var repoName = Environment.GetEnvironmentVariable("GITHUB_REPO") ?? "your-repo";
                
                var url = $"https://api.github.com/repos/{repoOwner}/{repoName}/actions/workflows/{workflowName}/dispatches";
                
                var payload = new
                {
                    @ref = "main",
                    inputs = inputs ?? new { }
                };
                
                var jsonPayload = JsonSerializer.Serialize(payload);
                var content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");
                
                var response = await _httpClient.PostAsync(url, content, cancellationToken).ConfigureAwait(false).ConfigureAwait(false);
                
                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("Successfully triggered workflow {Workflow}", workflowName);
                    return true;
                }
                else
                {
                    _logger.LogWarning("Failed to trigger workflow {Workflow}: {StatusCode}", workflowName, response.StatusCode);
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error triggering workflow {Workflow}", workflowName);
                return false;
            }
        }

        /// <summary>
        /// Triggers intelligence update workflows based on market conditions
        /// </summary>
        public async Task TriggerIntelligenceUpdateAsync(string symbol, decimal currentPrice, CancellationToken cancellationToken = default)
        {
            try
            {
                var inputs = new
                {
                    symbol = symbol,
                    current_price = currentPrice.ToString(),
                    timestamp = DateTimeOffset.UtcNow.ToString("O")
                };

                await TriggerWorkflowAsync("update-market-intelligence.yml", inputs, cancellationToken).ConfigureAwait(false);
                await TriggerWorkflowAsync("analyze-correlations.yml", inputs, cancellationToken).ConfigureAwait(false);
                await TriggerWorkflowAsync("update-zones.yml", inputs, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error triggering intelligence updates for {Symbol}", symbol);
            }
        }

        public void DisposeResources()
        {
            _httpClient?.Dispose();
        }
    }

    // Data models for workflow integration
    public class MarketIntelligence
    {
        public string Regime { get; set; } = "";
        public decimal Confidence { get; set; }
        public string PrimaryBias { get; set; } = "";
        public decimal NewsIntensity { get; set; }
        public bool IsFomcDay { get; set; }
        public bool IsCpiDay { get; set; }
        public DateTimeOffset Timestamp { get; set; }
        public Dictionary<string, decimal> ModelPredictions { get; set; } = new();
        
        // Additional properties for strategy-specific intelligence
        public decimal? MomentumStrength { get; set; }
        public string? VolatilityRegime { get; set; }
        public bool MicrostructureOpportunity { get; set; }
        public decimal? TrendPersistence { get; set; }
        public decimal? MeanReversionProbability { get; set; }
    }

    public class CorrelationData
    {
        public Dictionary<string, decimal> Correlations { get; set; } = new();
        public DateTimeOffset Timestamp { get; set; }
        public string BasePair { get; set; } = "";
    }

    public class ZoneAnalysis
    {
        public List<Zone> SupplyZones { get; set; } = new();
        public List<Zone> DemandZones { get; set; } = new();
        public decimal POC { get; set; } // Point of Control
        public decimal CurrentPrice { get; set; }
        public DateTimeOffset Timestamp { get; set; }
    }

    public class Zone
    {
        public decimal Top { get; set; }
        public decimal Bottom { get; set; }
        public decimal Strength { get; set; }
        public int Touches { get; set; }
        public DateTimeOffset FirstTouch { get; set; }
        public DateTimeOffset LastTouch { get; set; }
    }

    public class SentimentData
    {
        public decimal OverallScore { get; set; } // -1 to 1 scale
        public Dictionary<string, decimal> Sources { get; set; } = new();
        public DateTimeOffset Timestamp { get; set; }
        public List<string> KeyTopics { get; set; } = new();
    }
}
