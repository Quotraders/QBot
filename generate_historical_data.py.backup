#!/usr/bin/env python3
"""
Generate Historical Data for Backtesting
Creates synthetic but realistic ES/NQ historical data for past few weeks
"""
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
import random
import math

def generate_realistic_bar(prev_close, timestamp, symbol):
    """Generate realistic OHLCV bar data"""
    
    # Market hours and volatility patterns
    hour = timestamp.hour
    day_of_week = timestamp.weekday()
    
    # Volatility adjustments
    if symbol == "ES":
        base_volatility = 0.002  # 0.2% base volatility
        price_level = prev_close if prev_close > 0 else 4500.0
    else:  # NQ
        base_volatility = 0.003  # 0.3% base volatility 
        price_level = prev_close if prev_close > 0 else 15000.0
    
    # Increase volatility during market open/close
    if 9 <= hour <= 10 or 15 <= hour <= 16:
        vol_mult = 2.0
    elif 2 <= hour <= 4:  # European session
        vol_mult = 1.5
    elif hour >= 22 or hour <= 2:  # Asian session
        vol_mult = 1.2
    else:
        vol_mult = 1.0
    
    # Weekend/overnight adjustments
    if day_of_week >= 5:  # Weekend
        vol_mult *= 0.5
    
    volatility = base_volatility * vol_mult
    
    # Generate price movement with mean reversion
    random_walk = random.gauss(0, volatility)
    trend_component = random.gauss(0, volatility * 0.3)
    
    # Calculate OHLC
    price_change = price_level * (random_walk + trend_component)
    
    close = prev_close + price_change
    open_price = prev_close + random.gauss(0, price_level * volatility * 0.5)
    
    # Generate high/low with realistic wicks
    wick_size = price_level * volatility * random.uniform(0.5, 2.0)
    high = max(open_price, close) + wick_size
    low = min(open_price, close) - wick_size
    
    # Generate volume (higher during active hours)
    base_volume = 5000 if symbol == "ES" else 3000
    if 9 <= hour <= 16:
        volume = int(base_volume * random.uniform(1.5, 4.0))
    else:
        volume = int(base_volume * random.uniform(0.3, 1.2))
    
    return {
        "Start": timestamp.isoformat() + "Z",
        "Open": round(open_price, 2),
        "High": round(high, 2),
        "Low": round(low, 2),
        "Close": round(close, 2),
        "Volume": volume
    }

def generate_historical_data(symbol, days_back=21):
    """Generate historical data for the past N days"""
    
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=days_back)
    
    bars = []
    current_time = start_time
    
    # Starting prices
    if symbol == "ES":
        current_close = 4500.0 + random.uniform(-50, 50)
    else:  # NQ
        current_close = 15000.0 + random.uniform(-200, 200)
    
    print(f"Generating {symbol} data from {start_time.date()} to {end_time.date()}")
    
    while current_time < end_time:
        # Generate 1-minute bars
        bar = generate_realistic_bar(current_close, current_time, symbol)
        bars.append(bar)
        
        current_close = bar["Close"]
        current_time += timedelta(minutes=1)
        
        # Skip weekends (simplified)
        if current_time.weekday() >= 5:
            current_time += timedelta(days=2)
    
    print(f"Generated {len(bars)} bars for {symbol}")
    return bars

def main():
    """Generate historical data for ES and NQ"""
    
    # Create data directory
    data_dir = Path("data/historical")
    data_dir.mkdir(parents=True, exist_ok=True)
    
    print("🚀 Generating Historical Data for Backtesting...")
    print("📊 Creating realistic ES/NQ futures data for past 3 weeks")
    
    # Generate data for ES and NQ
    symbols = ["ES", "NQ"]
    
    for symbol in symbols:
        print(f"\n📈 Generating {symbol} historical data...")
        
        bars = generate_historical_data(symbol, days_back=21)  # Past 3 weeks
        
        # Save to JSON file (format expected by HistoricalTrainer)
        output_file = data_dir / f"{symbol}_bars.json"
        
        with open(output_file, 'w') as f:
            json.dump(bars, f, indent=2)
        
        print(f"✅ Saved {len(bars)} bars to {output_file}")
        
        # Show sample data
        if bars:
            first_bar = bars[0]
            last_bar = bars[-1]
            print(f"   📅 Date Range: {first_bar['Start']} to {last_bar['Start']}")
            print(f"   💰 Price Range: ${first_bar['Close']:.2f} to ${last_bar['Close']:.2f}")
    
    print(f"\n🎯 Historical data ready for backtesting!")
    print(f"📁 Data location: {data_dir.absolute()}")
    print(f"🔄 Run: ./trigger-backtest.ps1 to start backtesting your S3 strategy")

if __name__ == "__main__":
    main()