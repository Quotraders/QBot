name: "🧪 Quality Assurance Pipeline"

on:
  schedule:
    - cron: '0 7 * * *'  # Daily at 7 AM
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - unit_only
          - integration_only

concurrency:
  group: qa-tests
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

env:
  TEST_SCOPE: ${{ github.event.inputs.test_scope || 'full' }}
  RUNTIME_BUDGET: "720"  # 12 minutes

jobs:
  qa-tests:
    name: "Quality Assurance Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 12
    
    steps:

    
      - name: "🔧 Enable Long Paths"

    
        run: git config --global core.longpaths true

    
        

    
      - name:steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🐍 Setup Python Environment"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "🔧 Setup .NET Environment"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: "📦 Install Dependencies"
        run: |
          # Python dependencies
          pip install --upgrade pip
          pip install pytest pandas numpy
          pip install pyarrow jsonschema
          
          # .NET dependencies
          dotnet restore

      - name: "🧪 Run Unit Tests"
        if: env.TEST_SCOPE == 'full' || env.TEST_SCOPE == 'unit_only'
        run: |
          echo "🧪 Running unit tests using dev-helper.sh..."
          
          # Create test results directory
          mkdir -p test-results
          
          # Use real test command from dev-helper.sh
          if ./dev-helper.sh test; then
            echo "✅ Unit tests completed successfully"
            echo '{"status": "passed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > test-results/unit_tests.json
          else
            echo "❌ Unit tests failed"
            echo '{"status": "failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > test-results/unit_tests.json
            exit 1
          fi

      - name: "🔧 Run Risk Validation"
        if: env.TEST_SCOPE == 'full' || env.TEST_SCOPE == 'integration_only'
        run: |
          echo "🔧 Running risk validation using dev-helper.sh..."
          
          # Create test results directory
          mkdir -p test-results
          
          # Use real riskcheck command from dev-helper.sh
          if ./dev-helper.sh riskcheck; then
            echo "✅ Risk validation completed successfully"
            echo '{"status": "passed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "description": "Risk constants validated against committed snapshots"}' > test-results/risk_validation.json
          else
            echo "❌ Risk validation failed"
            echo '{"status": "failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "description": "Risk validation failed"}' > test-results/risk_validation.json
            exit 1
          fi

      - name: "📋 Analyzer Validation Checks"
        run: |
          echo "📋 Running analyzer validation checks using dev-helper.sh..."
          
          # Create test results directory
          mkdir -p test-results
          
          # Use real analyzer-check command from dev-helper.sh
          if ./dev-helper.sh analyzer-check; then
            echo "✅ Analyzer validation passed - no new warnings introduced"
            echo '{"status": "passed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "description": "No new analyzer warnings detected"}' > test-results/analyzer_validation.json
          else
            echo "❌ Analyzer validation failed - new warnings detected"
            echo '{"status": "failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "description": "New analyzer warnings detected"}' > test-results/analyzer_validation.json
            exit 1
          fi

      - name: "🔍 Guardrail Verification"
        run: |
          echo "🔍 Running guardrail verification using dev-helper.sh..."
          
          # Create test results directory
          mkdir -p test-results
          
          # Use real verify-guardrails command from dev-helper.sh
          if ./dev-helper.sh verify-guardrails; then
            echo "✅ All production guardrails verified successfully"
            echo '{"status": "passed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "description": "All production guardrails verified"}' > test-results/guardrail_verification.json
          else
            echo "❌ Guardrail verification failed"
            echo '{"status": "failed", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "description": "Guardrail verification failed"}' > test-results/guardrail_verification.json
            exit 1
          fi

      - name: "📊 Generate QA Report"
        run: |
          echo "📊 Generating comprehensive QA report..."
          
          # Create test results directory if it doesn't exist
          mkdir -p test-results
          
          # Generate summary report based on real test results
          timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Check which tests passed/failed based on JSON files
          unit_status="unknown"
          risk_status="unknown"
          analyzer_status="unknown"
          guardrail_status="unknown"
          
          if [ -f "test-results/unit_tests.json" ]; then
            unit_status=$(cat test-results/unit_tests.json | grep -o '"status": "[^"]*"' | cut -d'"' -f4)
          fi
          
          if [ -f "test-results/risk_validation.json" ]; then
            risk_status=$(cat test-results/risk_validation.json | grep -o '"status": "[^"]*"' | cut -d'"' -f4)
          fi
          
          if [ -f "test-results/analyzer_validation.json" ]; then
            analyzer_status=$(cat test-results/analyzer_validation.json | grep -o '"status": "[^"]*"' | cut -d'"' -f4)
          fi
          
          if [ -f "test-results/guardrail_verification.json" ]; then
            guardrail_status=$(cat test-results/guardrail_verification.json | grep -o '"status": "[^"]*"' | cut -d'"' -f4)
          fi
          
          # Determine overall status
          overall_status="passed"
          if [ "$unit_status" = "failed" ] || [ "$risk_status" = "failed" ] || [ "$analyzer_status" = "failed" ] || [ "$guardrail_status" = "failed" ]; then
            overall_status="failed"
          fi
          
          # Generate QA summary report
          cat > test-results/qa_summary.json << EOF
          {
            "timestamp": "$timestamp",
            "test_scope": "${{ env.TEST_SCOPE }}",
            "overall_status": "$overall_status",
            "test_results": {
              "unit_tests": "$unit_status",
              "risk_validation": "$risk_status", 
              "analyzer_validation": "$analyzer_status",
              "guardrail_verification": "$guardrail_status"
            },
            "description": "Real guardrail validation using dev-helper.sh scripts"
          }
          EOF
          
          echo "✅ QA report generated with overall status: $overall_status"
          echo "📊 Unit tests: $unit_status"
          echo "🔧 Risk validation: $risk_status"
          echo "📋 Analyzer validation: $analyzer_status"
          echo "🔍 Guardrail verification: $guardrail_status"

      - name: "📦 Upload QA Results"
        uses: actions/upload-artifact@v4
        with:
          name: qa-results-${{ github.run_number }}
          path: test-results/
          retention-days: 30

      - name: "✅ QA Summary"
        run: |
          echo "✅ Quality Assurance Pipeline Complete"
          
          if [ -f "test-results/qa_summary.json" ]; then
            qa_status=$(cat test-results/qa_summary.json | grep -o '"overall_status": "[^"]*"' | cut -d'"' -f4)
            
            echo "📊 Overall QA Status: $qa_status"
            
            if [ "$TEST_SCOPE" = "full" ]; then
              echo "🧪 Unit tests executed via dev-helper.sh"
              echo "🔧 Risk validation completed via dev-helper.sh"
            fi
            echo "📋 Analyzer validation performed via dev-helper.sh"
            echo "🔍 Guardrail verification completed via dev-helper.sh"
            echo "📊 Real guardrail enforcement using actual helper scripts"
            
            # Fail the workflow if any tests failed
            if [ "$qa_status" = "failed" ]; then
              echo "❌ QA validation failed - failing the workflow"
              exit 1
            fi
          else
            echo "⚠️ QA summary not available"
            exit 1
          fi
          
          echo "⏱️ Runtime: Under 12 minutes budget"