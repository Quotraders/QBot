name: "🤖 Bot Launch Diagnostics"

on:
  workflow_dispatch:
    inputs:
      runtime_minutes:
        description: 'Bot runtime duration (minutes)'
        required: false
        default: '5'
        type: choice
        options:
          - '5'
          - '10'
          - '15'
          - '20'
          - '30'
      capture_detailed_logs:
        description: 'Capture detailed verbose logs'
        required: false
        default: true
        type: boolean
      dry_run:
        description: 'Enable DRY_RUN mode (paper trading)'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  actions: write

env:
  TOPSTEPX_API_BASE: "https://api.topstepx.com"
  ARTIFACTS_DIR: "bot-diagnostics"
  DOTNET_VERSION: '8.0.x'

jobs:
  bot-launch-diagnostics:
    name: "Launch Bot with Full Diagnostics Capture"
    runs-on: [self-hosted, windows, x64]
    timeout-minutes: 40  # Covers max runtime (30min) + startup/shutdown buffer
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🔧 Setup .NET SDK"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "🔍 Pre-Launch Environment Validation"
        id: env_validation
        env:
          TOPSTEPX_API_KEY: ${{ secrets.TOPSTEPX_API_KEY }}
          TOPSTEPX_USERNAME: ${{ secrets.TOPSTEPX_USERNAME }}
          TOPSTEPX_ACCOUNT_ID: ${{ secrets.TOPSTEPX_ACCOUNT_ID }}
          TOPSTEPX_ACCOUNT_NAME: ${{ secrets.TOPSTEPX_ACCOUNT_NAME }}
        run: |
          echo "=================================================="
          echo "🔍 PRE-LAUNCH ENVIRONMENT VALIDATION"
          echo "=================================================="
          echo ""
          
          # Create diagnostics directory
          DiagDir="${RUNNER_TEMP}/${{ env.ARTIFACTS_DIR }}"
          mkdir -p "$DiagDir"
          echo "📁 Diagnostics directory: $DiagDir"
          echo ""
          
          # System Information
          echo "🖥️ System Information:"
          echo "  Runner: GitHub-hosted"
          echo "  OS: ${{ runner.os }}"
          echo "  Architecture: ${{ runner.arch }}"
          echo "  Hostname: $(hostname)"
          echo "  User: $(whoami)"
          echo "  Working Directory: $(pwd)"
          echo "  Temp Directory: $DiagDir"
          echo ""
          
          # .NET Environment
          echo "⚙️ .NET Environment:"
          DotnetVersion=$(dotnet --version)
          echo "  ✅ .NET SDK: $DotnetVersion"
          echo ""
          echo "📋 .NET SDK Information:"
          dotnet --info
          echo ""
          
          # Validate TopstepX credentials
          echo "📄 Configuration:"
          echo "  Validating TopstepX credentials..."
          
          if [ -z "${TOPSTEPX_API_KEY}" ] || [ -z "${TOPSTEPX_USERNAME}" ] || [ -z "${TOPSTEPX_ACCOUNT_ID}" ]; then
            echo "  ❌ ERROR: Required TopstepX credentials are missing!"
            echo ""
            echo "  Please ensure the following secrets are set in GitHub repository settings:"
            echo "    - TOPSTEPX_API_KEY"
            echo "    - TOPSTEPX_USERNAME"
            echo "    - TOPSTEPX_ACCOUNT_ID"
            echo "    - TOPSTEPX_ACCOUNT_NAME (optional)"
            echo ""
            exit 1
          fi
          
          echo "  ✅ TopstepX credentials: Validated"
          echo ""
          
          # Create .env file from secrets
          cat > .env << EOF
          # ===================================
          # GITHUB CLOUD LEARNING & RL
          # ===================================
          CLOUD_PROVIDER=github
          RL_ENABLED=1
          GITHUB_CLOUD_LEARNING=1
          
          # ===================================
          # AUTO-LEARNING & PROMOTION CONFIG
          # ===================================
          AUTO_PROMOTION_ENABLED=1
          AUTO_LEARNING_ENABLED=1
          CHALLENGER_AUTO_APPROVE=1
          REQUIRE_MANUAL_PROMOTION=0
          MIN_SHADOW_TEST_TRADES=50
          MIN_SHADOW_TEST_SESSIONS=5
          PROMOTION_CONFIDENCE_THRESHOLD=0.65
          ROLLBACK_ON_PERFORMANCE_DECLINE=1
          
          # ===================================
          # TRADING MODE CONFIGURATION
          # ===================================
          DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          ENABLE_DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          LIVE_ORDERS=0
          INSTANT_ALLOW_LIVE=0
          
          # ===================================
          # TOPSTEPX API CONFIGURATION
          # ===================================
          ENABLE_TOPSTEPX=1
          TOPSTEPX_API_BASE=https://api.topstepx.com
          TOPSTEPX_RTC_BASE=https://rtc.topstepx.com
          TOPSTEPX_ADAPTER_MODE=persistent
          TOPSTEPX_API_KEY=${TOPSTEPX_API_KEY}
          TOPSTEPX_USERNAME=${TOPSTEPX_USERNAME}
          TOPSTEPX_ACCOUNT_ID=${TOPSTEPX_ACCOUNT_ID}
          TOPSTEPX_ACCOUNT_NAME=${TOPSTEPX_ACCOUNT_NAME}
          TOPSTEPX_EVAL_ES_ID=CON.F.US.EP.Z25
          TOPSTEPX_EVAL_NQ_ID=CON.F.US.ENQ.Z25
          FORCE_TOPSTEPX_CONNECTION=true
          
          # ===================================
          # LOGGING CONFIGURATION
          # ===================================
          LOG_LEVEL=${{ github.event.inputs.capture_detailed_logs == 'true' && 'Debug' || 'Information' }}
          LOGGING__LOGLEVEL__DEFAULT=${{ github.event.inputs.capture_detailed_logs == 'true' && 'Debug' || 'Information' }}
          LOGGING__LOGLEVEL__SYSTEM=Information
          LOGGING__LOGLEVEL__MICROSOFT=Warning
          
          # ===================================
          # ENHANCED LEARNING CONFIGURATION
          # ===================================
          ENHANCED_LEARNING_ENABLED=1
          MODEL_REGISTRY_ENABLED=1
          CANARY_WATCHDOG_ENABLED=1
          ADAPTIVE_INTELLIGENCE_ENABLED=1
          PROMOTE_TUNER=1
          EOF
          
          echo "  ✅ .env file: Created from secrets"
          echo ""
          
          # Save system info to JSON
          cat > "$DiagDir/system-info.json" << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "runner": {
              "type": "GitHub-hosted",
              "os": "${{ runner.os }}",
              "arch": "${{ runner.arch }}",
              "hostname": "$(hostname)",
              "user": "$(whoami)"
            },
            "dotnet": {
              "version": "$DotnetVersion"
            },
            "workflow": {
              "name": "${{ github.workflow }}",
              "run_id": "${{ github.run_id }}",
              "run_number": "${{ github.run_number }}",
              "triggered_by": "${{ github.actor }}"
            }
          }
          EOF
          
          echo "💾 System info saved to: system-info.json"
          echo ""
          echo "=================================================="
          
          # Export diagnostics directory for later steps
          echo "diag_dir=$DiagDir" >> $GITHUB_OUTPUT

      - name: "🔧 Setup .NET and Restore Packages"
        run: |
          echo "=================================================="
          echo "🔧 .NET SETUP AND PACKAGE RESTORE"
          echo "=================================================="
          echo ""
          
          echo "📦 Restoring NuGet packages..."
          RestoreStart=$(date +%s)
          
          dotnet restore TopstepX.Bot.sln --verbosity minimal
          
          if [ $? -ne 0 ]; then
            echo "❌ NuGet restore failed"
            exit 1
          fi
          
          RestoreEnd=$(date +%s)
          RestoreDuration=$((RestoreEnd - RestoreStart))
          
          echo "✅ NuGet restore completed in ${RestoreDuration}s"
          echo ""
          echo "=================================================="

      - name: "🏗️ Build Trading Bot"
        run: |
          echo "=================================================="
          echo "🏗️ BUILDING TRADING BOT"
          echo "=================================================="
          echo ""
          
          BuildStart=$(date +%s)
          
          # Build UnifiedOrchestrator
          echo "🔨 Building UnifiedOrchestrator..."
          dotnet build src/UnifiedOrchestrator/UnifiedOrchestrator.csproj -c Release --no-restore
          
          if [ $? -ne 0 ]; then
            echo "❌ Build failed"
            exit 1
          fi
          
          BuildEnd=$(date +%s)
          BuildDuration=$((BuildEnd - BuildStart))
          
          echo ""
          echo "✅ Build completed successfully in ${BuildDuration}s"
          echo ""
          echo "=================================================="

      - name: "🔍 Verify Build Artifacts"
        run: |
          echo "=================================================="
          echo "🔍 VERIFYING BUILD ARTIFACTS"
          echo "=================================================="
          echo ""
          
          DLL_PATH="src/UnifiedOrchestrator/bin/Release/net8.0/UnifiedOrchestrator.dll"
          
          if [ -f "$DLL_PATH" ]; then
            FILE_SIZE=$(stat -c%s "$DLL_PATH" 2>/dev/null || stat -f%z "$DLL_PATH" 2>/dev/null)
            FILE_SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $FILE_SIZE / 1048576}")
            echo "✅ UnifiedOrchestrator.dll found"
            echo "   Size: $FILE_SIZE_MB MB"
            echo "   Path: $DLL_PATH"
          else
            echo "❌ UnifiedOrchestrator.dll NOT FOUND"
            echo "   Expected path: $DLL_PATH"
            echo ""
            echo "📁 Listing build output directory:"
            ls -la src/UnifiedOrchestrator/bin/Release/net8.0 2>/dev/null || echo "Directory not found"
            exit 1
          fi
          
          echo ""
          echo "=================================================="

      - name: "🚀 Launch Bot with Full Diagnostics"
        id: bot_launch
        continue-on-error: true
        run: |
          echo "=================================================="
          echo "🚀 LAUNCHING TRADING BOT WITH DIAGNOSTICS"
          echo "=================================================="
          echo ""
          
          # Load environment variables from .env
          if [ -f ".env" ]; then
            echo "📥 Loading environment variables from .env..."
            export $(grep -v '^#' .env | grep -v '^$' | xargs)
            echo "✅ Environment variables loaded"
            echo ""
          fi
          
          DiagDir="${{ steps.env_validation.outputs.diag_dir }}"
          if [ -z "$DiagDir" ]; then
            DiagDir="${RUNNER_TEMP}/${{ env.ARTIFACTS_DIR }}"
            mkdir -p "$DiagDir"
            echo "⚠️ Using fallback diagnostics directory: $DiagDir"
          fi
          Timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
          
          # Create log files
          ConsoleLogFile="$DiagDir/console-output-$Timestamp.log"
          ErrorLogFile="$DiagDir/error-output-$Timestamp.log"
          StructuredLogFile="$DiagDir/structured-log-$Timestamp.json"
          
          echo "📝 Log files:"
          echo "  Console: console-output-$Timestamp.log"
          echo "  Errors: error-output-$Timestamp.log"
          echo "  Structured: structured-log-$Timestamp.json"
          echo ""
          
          # Override with DRY_RUN for safety if configured
          export DRY_RUN="${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}"
          export ENABLE_DRY_RUN="${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}"
          echo "⚠️ DRY_RUN mode: ${{ github.event.inputs.dry_run }}"
          echo ""
          
          # Prepare bot launch
          echo "🎯 Bot configuration:"
          echo "  Runtime: ${{ github.event.inputs.runtime_minutes || '5' }} minutes"
          echo "  Detailed logging: ${{ github.event.inputs.capture_detailed_logs || 'true' }}"
          echo ""
          echo "=================================================="
          echo ""
          echo "🤖 STARTING BOT..."
          echo ""
          
          # Capture startup timestamp
          StartTime=$(date +%s)
          
          # Launch bot with output capture
          echo "🔄 Starting process..."
          dotnet run \
            --project src/UnifiedOrchestrator/UnifiedOrchestrator.csproj \
            --no-build \
            -c Release \
            > >(tee "$ConsoleLogFile") \
            2> >(tee "$ErrorLogFile" >&2) &
          
          BOT_PID=$!
          echo "✅ Process started (PID: $BOT_PID)"
          
          # Give process a few seconds to initialize
          echo "⏳ Waiting for initialization..."
          sleep 5
          
          # Check if process crashed immediately
          if ! kill -0 $BOT_PID 2>/dev/null; then
            ExitCode=$?
            echo ""
            echo "❌ Process exited immediately with code: $ExitCode"
            echo ""
            echo "This usually indicates a startup failure. Check the logs for errors."
            
            # Show first 100 lines of output for debugging
            echo "📋 First 100 lines of output:"
            echo "=================================================="
            head -100 "$ConsoleLogFile"
            echo "=================================================="
            
            # Also show errors
            if [ -f "$ErrorLogFile" ]; then
              echo ""
              echo "📋 Error output:"
              echo "=================================================="
              cat "$ErrorLogFile"
              echo "=================================================="
            fi
            
            exit 1
          fi
          
          echo ""
          echo "⏱️ Bot is running... (will run for ${{ github.event.inputs.runtime_minutes || '5' }} minutes)"
          echo ""
          
          # Wait for specified duration with periodic checks
          RuntimeMinutes=${{ github.event.inputs.runtime_minutes || '5' }}
          TimeoutSeconds=$((RuntimeMinutes * 60))
          CheckIntervalSeconds=10
          ElapsedSeconds=0
          
          while [ $ElapsedSeconds -lt $TimeoutSeconds ]; do
            # Check if process is still running
            if ! kill -0 $BOT_PID 2>/dev/null; then
              wait $BOT_PID 2>/dev/null
              ExitCode=$?
              echo ""
              echo "⚠️ Bot process exited (exit code: $ExitCode)"
              
              # Save exit code to output
              echo "exit_code=$ExitCode" >> $GITHUB_OUTPUT
              echo "exit_reason=exited" >> $GITHUB_OUTPUT
              
              break
            fi
            
            # Wait and update progress
            sleep $CheckIntervalSeconds
            ElapsedSeconds=$((ElapsedSeconds + CheckIntervalSeconds))
            
            # Show progress every 30 seconds
            if [ $((ElapsedSeconds % 30)) -eq 0 ]; then
              RemainingMinutes=$(awk "BEGIN {printf \"%.1f\", ($TimeoutSeconds - $ElapsedSeconds) / 60}")
              echo "⏱️ Still running... ($RemainingMinutes minutes remaining)"
            fi
          done
          
          EndTime=$(date +%s)
          ActualRuntime=$((EndTime - StartTime))
          
          # Stop process if still running
          if kill -0 $BOT_PID 2>/dev/null; then
            echo ""
            echo "⏱️ Runtime limit reached ($RuntimeMinutes minutes)"
            echo "🛑 Stopping bot gracefully..."
            
            # Try graceful shutdown first
            kill -SIGTERM $BOT_PID 2>/dev/null
            sleep 5
            
            # Force kill if still running
            if kill -0 $BOT_PID 2>/dev/null; then
              echo "🔨 Force stopping..."
              kill -SIGKILL $BOT_PID 2>/dev/null
              sleep 2
            fi
            
            ExitCode=0  # Timeout is expected, not an error
            ExitReason="timeout"
            
            echo "exit_code=0" >> $GITHUB_OUTPUT
            echo "exit_reason=timeout" >> $GITHUB_OUTPUT
            
            echo "✅ Bot stopped"
          fi
          
          # Create structured log
          cat > "$StructuredLogFile" << EOF
          {
            "launch_timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "@$StartTime")",
            "end_timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "@$EndTime")",
            "runtime_minutes": "${{ github.event.inputs.runtime_minutes || '5' }}",
            "actual_runtime_seconds": $ActualRuntime,
            "dry_run_enabled": ${{ github.event.inputs.dry_run }},
            "exit_code": ${ExitCode:-0},
            "exit_reason": "${ExitReason:-timeout}",
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF
          
          echo ""
          echo "=================================================="
          echo "📊 BOT EXECUTION SUMMARY"
          echo "=================================================="
          echo "  Exit Code: ${ExitCode:-0}"
          echo "  Exit Reason: ${ExitReason:-timeout}"
          echo "  Actual Runtime: ${ActualRuntime}s"
          echo "=================================================="
          echo ""
          
          # Output last 150 lines for GitHub Actions UI
          echo "📋 LAST 150 LINES OF OUTPUT:"
          echo "=================================================="
          tail -150 "$ConsoleLogFile"
          echo "=================================================="
          echo ""
          
          # Set runtime output
          echo "runtime_seconds=$ActualRuntime" >> $GITHUB_OUTPUT

      - name: "📦 Package Diagnostics Artifacts"
        if: always()
        run: |
          echo "=================================================="
          echo "📦 PACKAGING DIAGNOSTICS ARTIFACTS"
          echo "=================================================="
          echo ""
          
          DiagDir="${{ steps.env_validation.outputs.diag_dir }}"
          if [ -z "$DiagDir" ]; then
            DiagDir="${RUNNER_TEMP}/${{ env.ARTIFACTS_DIR }}"
            echo "⚠️ Using fallback diagnostics directory: $DiagDir"
          fi
          
          # Check if directory exists and has content
          if [ ! -d "$DiagDir" ]; then
            echo "⚠️ Diagnostics directory not found: $DiagDir"
            echo "   This may indicate the workflow failed early."
            mkdir -p "$DiagDir"
            echo "Workflow failed during early stage - no diagnostics captured" > "$DiagDir/workflow-failure-note.txt"
            exit 0
          fi
          
          # List all captured files
          echo "📁 Captured artifacts:"
          ls -lh "$DiagDir/" | tail -n +2 | awk '{printf "  📄 %s (%.2f KB)\n", $9, $5/1024}'
          
          echo ""
          echo "✅ Diagnostics packaged and ready for upload"
          echo ""
          echo "=================================================="

      - name: "⬆️ Upload Diagnostics Artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bot-diagnostics-run-${{ github.run_number }}
          path: ${{ steps.env_validation.outputs.diag_dir || format('{0}/{1}', runner.temp, env.ARTIFACTS_DIR) }}
          retention-days: 30
          compression-level: 6

      - name: "📊 Final Execution Report"
        if: always()
        run: |
          echo ""
          echo "=================================================="
          echo "📊 BOT LAUNCH DIAGNOSTICS - FINAL REPORT"
          echo "=================================================="
          echo ""
          echo "🤖 Bot Launch Summary:"
          echo "  Workflow: ${{ github.workflow }}"
          echo "  Run ID: ${{ github.run_id }}"
          echo "  Run Number: ${{ github.run_number }}"
          echo "  Triggered By: ${{ github.actor }}"
          echo ""
          echo "📊 Execution Results:"
          echo "  Exit Code: ${{ steps.bot_launch.outputs.exit_code || 'N/A' }}"
          echo "  Exit Reason: ${{ steps.bot_launch.outputs.exit_reason || 'N/A' }}"
          echo "  Runtime: ${{ steps.bot_launch.outputs.runtime_seconds || 'N/A' }}s"
          echo ""
          echo "📦 Artifacts:"
          echo "  Name: bot-diagnostics-run-${{ github.run_number }}"
          echo "  Location: GitHub Actions Artifacts (30 day retention)"
          echo "  Access: Actions → This workflow run → Artifacts section"
          echo ""
          echo "📁 Artifact Contents:"
          echo "  • system-info.json - System and environment information"
          echo "  • console-output-*.log - Complete console output from bot"
          echo "  • error-output-*.log - Error stream output"
          echo "  • structured-log-*.json - Parsed startup events and metrics"
          echo ""
          
          EXIT_CODE="${{ steps.bot_launch.outputs.exit_code }}"
          EXIT_REASON="${{ steps.bot_launch.outputs.exit_reason }}"
          
          if [ "$EXIT_REASON" = "timeout" ]; then
            echo "✅ Status: SUCCESS (Completed scheduled runtime)"
            echo ""
            echo "ℹ️ The bot ran for the configured duration and was stopped gracefully."
            echo "   This is expected behavior for diagnostic runs."
          elif [ "$EXIT_CODE" = "0" ]; then
            echo "✅ Status: SUCCESS"
            echo ""
            echo "ℹ️ The bot completed successfully."
          else
            echo "⚠️ Status: COMPLETED WITH ISSUES"
            echo ""
            echo "ℹ️ The bot may have encountered errors. Check the artifacts for details."
          fi
          
          echo ""
          echo "💡 Next Steps:"
          echo "  1. Download the artifacts from this workflow run"
          echo "  2. Review console-output-*.log for complete startup sequence"
          echo "  3. Check structured-log-*.json for parsed events"
          echo "  4. Analyze error-output-*.log if issues occurred"
          echo ""
          echo "=================================================="
          echo "✅ DIAGNOSTICS COMPLETE"
          echo "=================================================="
