name: "üñ•Ô∏è Self-Hosted Runner Test"

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read

env:
  TOPSTEPX_API_BASE: "https://api.topstepx.com"

jobs:
  selfhosted-test:
    name: "Self-Hosted Runner Connectivity Test"
    runs-on: self-hosted
    timeout-minutes: 10
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üñ•Ô∏è Print Runner Identity"
        run: |
          echo "=================================================="
          echo "üñ•Ô∏è Self-Hosted Runner Information"
          echo "=================================================="
          echo ""
          echo "Runner Name: ${{ runner.name }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Architecture: ${{ runner.arch }}"
          echo "Runner Workspace: ${{ runner.workspace }}"
          echo ""
          echo "Machine Identity:"
          echo "  Hostname: $(hostname)"
          echo "  User: $(whoami)"
          echo "  Working Directory: $(pwd)"
          echo ""
          if [ -f "/etc/os-release" ]; then
            echo "OS Information:"
            grep -E "^(NAME|VERSION|ID)=" /etc/os-release || true
          fi
          echo ""
          echo "Environment Variables (filtered):"
          env | grep -E "^(RUNNER_|GITHUB_)" | sort || true
          echo ""
          echo "=================================================="

      - name: "üåê Connectivity Check to TopstepX API"
        id: connectivity_check
        run: |
          echo "=================================================="
          echo "üåê Testing Connectivity to TopstepX API"
          echo "=================================================="
          echo ""
          
          API_BASE="${{ env.TOPSTEPX_API_BASE }}"
          echo "Target API: $API_BASE"
          echo ""
          
          # Initialize result variables
          CONNECTIVITY_STATUS="UNKNOWN"
          HTTP_CODE=""
          RESPONSE_TIME=""
          DNS_RESOLUTION="UNKNOWN"
          
          # DNS Resolution Check
          echo "üîç DNS Resolution Test:"
          API_HOST=$(echo "$API_BASE" | sed -E 's|https?://([^/]+).*|\1|')
          if nslookup "$API_HOST" > /dev/null 2>&1; then
            DNS_RESOLUTION="SUCCESS"
            echo "  ‚úÖ DNS resolution successful for $API_HOST"
            nslookup "$API_HOST" | grep -A2 "Name:" || true
          else
            DNS_RESOLUTION="FAILED"
            echo "  ‚ùå DNS resolution failed for $API_HOST"
          fi
          echo ""
          
          # HTTP Connectivity Check
          echo "üîå HTTP Connectivity Test:"
          START_TIME=$(date +%s%N)
          
          if command -v curl > /dev/null 2>&1; then
            # Use curl for connectivity check
            HTTP_RESPONSE=$(curl -w "\n%{http_code}\n%{time_total}" \
              --connect-timeout 5 \
              --max-time 10 \
              -s -o /dev/null \
              -H "User-Agent: QBot-SelfHosted-Runner-Test/1.0" \
              "$API_BASE" 2>&1 || echo "000")
            
            HTTP_CODE=$(echo "$HTTP_RESPONSE" | tail -n2 | head -n1)
            RESPONSE_TIME=$(echo "$HTTP_RESPONSE" | tail -n1)
            
            echo "  HTTP Status Code: $HTTP_CODE"
            echo "  Response Time: ${RESPONSE_TIME}s"
            
            if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 500 ]; then
              CONNECTIVITY_STATUS="SUCCESS"
              echo "  ‚úÖ API endpoint is reachable (HTTP $HTTP_CODE)"
            else
              CONNECTIVITY_STATUS="FAILED"
              echo "  ‚ùå API endpoint returned unexpected status (HTTP $HTTP_CODE)"
            fi
          else
            echo "  ‚ö†Ô∏è curl not available, attempting with wget"
            if command -v wget > /dev/null 2>&1; then
              if wget --timeout=10 --tries=1 -q --spider "$API_BASE" 2>&1; then
                CONNECTIVITY_STATUS="SUCCESS"
                echo "  ‚úÖ API endpoint is reachable (wget check)"
              else
                CONNECTIVITY_STATUS="FAILED"
                echo "  ‚ùå API endpoint is not reachable (wget check)"
              fi
            else
              CONNECTIVITY_STATUS="SKIPPED"
              echo "  ‚ö†Ô∏è No HTTP tools available (curl/wget)"
            fi
          fi
          
          END_TIME=$(date +%s%N)
          TOTAL_TIME=$(echo "scale=3; ($END_TIME - $START_TIME) / 1000000000" | bc 2>/dev/null || echo "N/A")
          
          echo ""
          echo "üìä Connectivity Summary:"
          echo "  DNS Resolution: $DNS_RESOLUTION"
          echo "  HTTP Status: $CONNECTIVITY_STATUS"
          echo "  HTTP Code: ${HTTP_CODE:-N/A}"
          echo "  Total Check Time: ${TOTAL_TIME}s"
          echo ""
          echo "=================================================="
          
          # Export for audit logging
          echo "connectivity_status=$CONNECTIVITY_STATUS" >> $GITHUB_OUTPUT
          echo "http_code=${HTTP_CODE:-000}" >> $GITHUB_OUTPUT
          echo "dns_resolution=$DNS_RESOLUTION" >> $GITHUB_OUTPUT
          echo "response_time=${RESPONSE_TIME:-N/A}" >> $GITHUB_OUTPUT

      - name: "üìã Generate Audit Log"
        run: |
          echo "=================================================="
          echo "üìã Generating Audit Log"
          echo "=================================================="
          echo ""
          
          # Create audit log directory
          AUDIT_DIR="/tmp/qbot-selfhosted-audit"
          mkdir -p "$AUDIT_DIR"
          
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          AUDIT_FILE="$AUDIT_DIR/selfhosted-connectivity-${TIMESTAMP//:/-}.json"
          
          # Generate structured audit log
          cat > "$AUDIT_FILE" << 'EOF'
          {
            "audit_type": "selfhosted_runner_connectivity_test",
            "timestamp": "TIMESTAMP_PLACEHOLDER",
            "workflow": {
              "name": "${{ github.workflow }}",
              "run_id": "${{ github.run_id }}",
              "run_number": "${{ github.run_number }}",
              "run_attempt": "${{ github.run_attempt }}",
              "triggered_by": "${{ github.actor }}",
              "event": "${{ github.event_name }}",
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}"
            },
            "runner": {
              "name": "${{ runner.name }}",
              "os": "${{ runner.os }}",
              "arch": "${{ runner.arch }}",
              "hostname": "HOSTNAME_PLACEHOLDER",
              "user": "USER_PLACEHOLDER"
            },
            "connectivity_test": {
              "target_url": "${{ env.TOPSTEPX_API_BASE }}",
              "status": "${{ steps.connectivity_check.outputs.connectivity_status }}",
              "http_code": "${{ steps.connectivity_check.outputs.http_code }}",
              "dns_resolution": "${{ steps.connectivity_check.outputs.dns_resolution }}",
              "response_time": "${{ steps.connectivity_check.outputs.response_time }}"
            },
            "audit_metadata": {
              "audit_file": "AUDIT_FILE_PLACEHOLDER",
              "audit_format": "json",
              "retention_policy": "local_only"
            }
          }
          EOF
          
          # Replace placeholders
          sed -i "s|TIMESTAMP_PLACEHOLDER|$TIMESTAMP|g" "$AUDIT_FILE"
          sed -i "s|HOSTNAME_PLACEHOLDER|$(hostname)|g" "$AUDIT_FILE"
          sed -i "s|USER_PLACEHOLDER|$(whoami)|g" "$AUDIT_FILE"
          sed -i "s|AUDIT_FILE_PLACEHOLDER|$AUDIT_FILE|g" "$AUDIT_FILE"
          
          echo "‚úÖ Audit log generated: $AUDIT_FILE"
          echo ""
          echo "üìÑ Audit Log Contents:"
          cat "$AUDIT_FILE" | jq '.' 2>/dev/null || cat "$AUDIT_FILE"
          echo ""
          echo "=================================================="

      - name: "üìä Connectivity Test Summary"
        run: |
          echo "=================================================="
          echo "üìä Self-Hosted Runner Test Summary"
          echo "=================================================="
          echo ""
          echo "‚úÖ Runner Identity: Verified"
          echo "  Runner: ${{ runner.name }} (${{ runner.os }}/${{ runner.arch }})"
          echo "  Host: $(hostname)"
          echo ""
          
          CONN_STATUS="${{ steps.connectivity_check.outputs.connectivity_status }}"
          DNS_STATUS="${{ steps.connectivity_check.outputs.dns_resolution }}"
          HTTP_CODE="${{ steps.connectivity_check.outputs.http_code }}"
          
          if [ "$CONN_STATUS" = "SUCCESS" ] && [ "$DNS_STATUS" = "SUCCESS" ]; then
            echo "‚úÖ Connectivity Test: PASSED"
            echo "  API Endpoint: ${{ env.TOPSTEPX_API_BASE }}"
            echo "  HTTP Status: $HTTP_CODE"
            echo "  DNS Resolution: SUCCESS"
          else
            echo "‚ùå Connectivity Test: FAILED"
            echo "  API Endpoint: ${{ env.TOPSTEPX_API_BASE }}"
            echo "  HTTP Status: ${HTTP_CODE:-N/A}"
            echo "  DNS Resolution: $DNS_STATUS"
            echo ""
            echo "‚ö†Ô∏è Warning: API connectivity issues detected"
          fi
          echo ""
          echo "‚úÖ Audit Logging: Complete"
          echo "  Location: /tmp/qbot-selfhosted-audit/"
          echo "  Format: JSON"
          echo ""
          echo "=================================================="
          echo "üéâ Self-Hosted Runner Test Complete"
          echo "=================================================="
