name: "üñ•Ô∏è Self-Hosted Runner Test"

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read

env:
  TOPSTEPX_API_BASE: "https://api.topstepx.com"

jobs:
  selfhosted-test:
    name: "Self-Hosted Runner Connectivity Test"
    runs-on: self-hosted
    timeout-minutes: 10
    
    steps:
      - name: Configure Git
        run: |
          git config --global core.longpaths true
          git config --global core.symlinks false
      
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üîß Setup .NET SDK"
        uses: actions/setup-dotnet@v4
        env:
          DOTNET_INSTALL_DIR: ${{ runner.temp }}/.dotnet
        with:
          dotnet-version: '8.0.x'

      - name: "üñ•Ô∏è Print Runner Identity"
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üñ•Ô∏è Self-Hosted Runner Information"
          Write-Output "=================================================="
          Write-Output ""
          Write-Output "Runner Name: ${{ runner.name }}"
          Write-Output "Runner OS: ${{ runner.os }}"
          Write-Output "Runner Architecture: ${{ runner.arch }}"
          Write-Output "Workspace: ${{ github.workspace }}"
          Write-Output ""
          Write-Output "Machine Identity:"
          Write-Output "  Hostname: $env:COMPUTERNAME"
          Write-Output "  User: $env:USERNAME"
          Write-Output "  Working Directory: $(Get-Location)"
          Write-Output ""
          Write-Output "OS Information:"
          Write-Output "  OS: $([System.Environment]::OSVersion.VersionString)"
          Write-Output "  Platform: $([System.Environment]::OSVersion.Platform)"
          Write-Output ""
          Write-Output "Environment Variables (filtered):"
          Get-ChildItem Env: | Where-Object { $_.Name -match '^(RUNNER_|GITHUB_)' } | Sort-Object Name | ForEach-Object { Write-Output "  $($_.Name)=$($_.Value)" }
          Write-Output ""
          Write-Output "=================================================="

      - name: "üåê Connectivity Check to TopstepX API"
        id: connectivity_check
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üåê Testing Connectivity to TopstepX API"
          Write-Output "=================================================="
          Write-Output ""
          
          $ApiBase = "${{ env.TOPSTEPX_API_BASE }}"
          Write-Output "Target API: $ApiBase"
          Write-Output ""
          
          # Initialize result variables
          $ConnectivityStatus = "UNKNOWN"
          $HttpCode = ""
          $ResponseTime = ""
          $DnsResolution = "UNKNOWN"
          
          # DNS Resolution Check
          Write-Output "üîç DNS Resolution Test:"
          $ApiHost = ([System.Uri]$ApiBase).Host
          try {
            $DnsResult = Resolve-DnsName -Name $ApiHost -ErrorAction Stop
            $DnsResolution = "SUCCESS"
            Write-Output "  ‚úÖ DNS resolution successful for $ApiHost"
            Write-Output "  IP Addresses: $($DnsResult.IPAddress -join ', ')"
          } catch {
            $DnsResolution = "FAILED"
            Write-Output "  ‚ùå DNS resolution failed for $ApiHost"
            Write-Output "  Error: $($_.Exception.Message)"
          }
          Write-Output ""
          
          # HTTP Connectivity Check
          Write-Output "üîå HTTP Connectivity Test:"
          $StartTime = Get-Date
          
          try {
            $Response = Invoke-WebRequest -Uri $ApiBase `
              -Method Get `
              -TimeoutSec 10 `
              -UserAgent "QBot-SelfHosted-Runner-Test/1.0" `
              -ErrorAction Stop
            
            $EndTime = Get-Date
            $ResponseTime = ($EndTime - $StartTime).TotalSeconds
            $HttpCode = [int]$Response.StatusCode
            
            Write-Output "  HTTP Status Code: $HttpCode"
            Write-Output "  Response Time: $($ResponseTime.ToString('F3'))s"
            
            if ($HttpCode -ge 200 -and $HttpCode -lt 500) {
              $ConnectivityStatus = "SUCCESS"
              Write-Output "  ‚úÖ API endpoint is reachable (HTTP $HttpCode)"
            } else {
              $ConnectivityStatus = "FAILED"
              Write-Output "  ‚ùå API endpoint returned unexpected status (HTTP $HttpCode)"
            }
          } catch {
            $EndTime = Get-Date
            $ResponseTime = ($EndTime - $StartTime).TotalSeconds
            
            # Try to extract status code from exception
            if ($_.Exception.Response) {
              $HttpCode = [int]$_.Exception.Response.StatusCode
            } else {
              $HttpCode = 0
            }
            
            Write-Output "  HTTP Status Code: $HttpCode"
            Write-Output "  Response Time: $($ResponseTime.ToString('F3'))s"
            
            if ($HttpCode -ge 200 -and $HttpCode -lt 500) {
              $ConnectivityStatus = "SUCCESS"
              Write-Output "  ‚úÖ API endpoint is reachable (HTTP $HttpCode)"
            } else {
              $ConnectivityStatus = "FAILED"
              Write-Output "  ‚ùå API connectivity failed"
              Write-Output "  Error: $($_.Exception.Message)"
            }
          }
          
          $TotalTime = ($EndTime - $StartTime).TotalSeconds
          
          Write-Output ""
          Write-Output "üìä Connectivity Summary:"
          Write-Output "  DNS Resolution: $DnsResolution"
          Write-Output "  HTTP Status: $ConnectivityStatus"
          Write-Output "  HTTP Code: $(if ($HttpCode) { $HttpCode } else { 'N/A' })"
          Write-Output "  Total Check Time: $($TotalTime.ToString('F3'))s"
          Write-Output ""
          Write-Output "=================================================="
          
          # Export for audit logging
          "connectivity_status=$ConnectivityStatus" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "http_code=$(if ($HttpCode) { $HttpCode } else { '000' })" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "dns_resolution=$DnsResolution" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "response_time=$(if ($ResponseTime) { $ResponseTime.ToString('F3') } else { 'N/A' })" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: "üìã Generate Audit Log"
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üìã Generating Audit Log"
          Write-Output "=================================================="
          Write-Output ""
          
          # Create audit log directory
          $AuditDir = "$env:TEMP\qbot-selfhosted-audit"
          New-Item -ItemType Directory -Path $AuditDir -Force | Out-Null
          
          $Timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          $TimestampFile = $Timestamp -replace ':', '-'
          $AuditFile = "$AuditDir\selfhosted-connectivity-$TimestampFile.json"
          
          # Generate structured audit log
          $AuditData = @{
            audit_type = "selfhosted_runner_connectivity_test"
            timestamp = $Timestamp
            workflow = @{
              name = "${{ github.workflow }}"
              run_id = "${{ github.run_id }}"
              run_number = "${{ github.run_number }}"
              run_attempt = "${{ github.run_attempt }}"
              triggered_by = "${{ github.actor }}"
              event = "${{ github.event_name }}"
              ref = "${{ github.ref }}"
              sha = "${{ github.sha }}"
            }
            runner = @{
              name = "${{ runner.name }}"
              os = "${{ runner.os }}"
              arch = "${{ runner.arch }}"
              hostname = $env:COMPUTERNAME
              user = $env:USERNAME
            }
            connectivity_test = @{
              target_url = "${{ env.TOPSTEPX_API_BASE }}"
              status = "${{ steps.connectivity_check.outputs.connectivity_status }}"
              http_code = "${{ steps.connectivity_check.outputs.http_code }}"
              dns_resolution = "${{ steps.connectivity_check.outputs.dns_resolution }}"
              response_time = "${{ steps.connectivity_check.outputs.response_time }}"
            }
            audit_metadata = @{
              audit_file = $AuditFile
              audit_format = "json"
              retention_policy = "local_only"
            }
          }
          
          # Write audit log
          $AuditData | ConvertTo-Json -Depth 10 | Out-File -FilePath $AuditFile -Encoding utf8
          
          Write-Output "‚úÖ Audit log generated: $AuditFile"
          Write-Output ""
          Write-Output "üìÑ Audit Log Contents:"
          Get-Content $AuditFile | ConvertFrom-Json | ConvertTo-Json -Depth 10
          Write-Output ""
          Write-Output "=================================================="

      - name: "üìä Connectivity Test Summary"
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üìä Self-Hosted Runner Test Summary"
          Write-Output "=================================================="
          Write-Output ""
          Write-Output "‚úÖ Runner Identity: Verified"
          Write-Output "  Runner: ${{ runner.name }} (${{ runner.os }}/${{ runner.arch }})"
          Write-Output "  Host: $env:COMPUTERNAME"
          Write-Output ""
          
          $ConnStatus = "${{ steps.connectivity_check.outputs.connectivity_status }}"
          $DnsStatus = "${{ steps.connectivity_check.outputs.dns_resolution }}"
          $HttpCode = "${{ steps.connectivity_check.outputs.http_code }}"
          
          if ($ConnStatus -eq "SUCCESS" -and $DnsStatus -eq "SUCCESS") {
            Write-Output "‚úÖ Connectivity Test: PASSED"
            Write-Output "  API Endpoint: ${{ env.TOPSTEPX_API_BASE }}"
            Write-Output "  HTTP Status: $HttpCode"
            Write-Output "  DNS Resolution: SUCCESS"
          } else {
            Write-Output "‚ùå Connectivity Test: FAILED"
            Write-Output "  API Endpoint: ${{ env.TOPSTEPX_API_BASE }}"
            Write-Output "  HTTP Status: $(if ($HttpCode) { $HttpCode } else { 'N/A' })"
            Write-Output "  DNS Resolution: $DnsStatus"
            Write-Output ""
            Write-Output "‚ö†Ô∏è Warning: API connectivity issues detected"
          }
          Write-Output ""
          Write-Output "‚úÖ Audit Logging: Complete"
          Write-Output "  Location: $env:TEMP\qbot-selfhosted-audit\"
          Write-Output "  Format: JSON"
          Write-Output ""
          Write-Output "=================================================="
          Write-Output "üéâ Self-Hosted Runner Test Complete"
          Write-Output "=================================================="
