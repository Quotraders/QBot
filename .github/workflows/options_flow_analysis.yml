name: Options Flow Analysis (Team)
on:
  schedule:
  - cron: '*/5 14-15 * * 1-5'
  - cron: '*/15 15-20 * * 1-5'
  - cron: '*/10 20-21 * * 1-5'
  workflow_dispatch: null

permissions:
  contents: read
  actions: read
jobs:
  analyze-flow:
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        cache: pip
    - name: Install Dependencies
      run: 'pip install --upgrade pip

        pip install yfinance pandas numpy requests

        '
    - name: Analyze Options Flow
      run: "python << 'EOF'\nimport yfinance as yf\nimport pandas as pd\nimport numpy\
        \ as np\nimport json\nfrom datetime import datetime\n\nprint(f\"[OPTIONS]\
        \ Starting flow analysis at {datetime.utcnow()}\")\n\n# Monitor key ETFs for\
        \ options activity\nsymbols = ['SPY', 'QQQ', 'IWM']\nflow_data = {}\n\nfor\
        \ symbol in symbols:\n    try:\n        ticker = yf.Ticker(symbol)\n     \
        \   \n        # Get recent data\n        hist = ticker.history(period='1d',\
        \ interval='5m')\n        \n        if not hist.empty:\n            # Calculate\
        \ unusual volume\n            avg_volume = hist['Volume'].rolling(20).mean()\n\
        \            current_volume = hist['Volume'].iloc[-1]\n            volume_spike\
        \ = current_volume / avg_volume.iloc[-1] if avg_volume.iloc[-1] > 0 else 1\n\
        \            \n            # Price momentum\n            price_momentum =\
        \ (hist['Close'].iloc[-1] - hist['Close'].iloc[-5]) / hist['Close'].iloc[-5]\
        \ * 100\n            \n            flow_data[symbol] = {\n               \
        \ 'price': float(hist['Close'].iloc[-1]),\n                'volume_spike':\
        \ float(volume_spike),\n                'momentum': float(price_momentum),\n\
        \                'signal_strength': min(1.0, abs(price_momentum) * volume_spike\
        \ / 10),\n                'timestamp': datetime.utcnow().isoformat()\n   \
        \         }\n            \n            print(f\"[{symbol}] Volume Spike: {volume_spike:.2f}x,\
        \ Momentum: {price_momentum:.2f}%\")\n            \n    except Exception as\
        \ e:\n        print(f\"[ERROR] {symbol}: {e}\")\n\n# Save flow analysis\n\
        import os\nos.makedirs('data/options', exist_ok=True)\nwith open('data/options/flow_analysis.json',\
        \ 'w') as f:\n    json.dump(flow_data, f, indent=2)\n\n# Generate alerts for\
        \ unusual activity\nalerts = []\nfor symbol, data in flow_data.items():\n\
        \    if data['volume_spike'] > 2.0 and abs(data['momentum']) > 0.5:\n    \
        \    alerts.append(f\"{symbol}: HIGH ACTIVITY - Volume {data['volume_spike']:.1f}x,\
        \ Momentum {data['momentum']:.1f}%\")\n\nif alerts:\n    print(\"[ALERTS]\"\
        )\n    for alert in alerts:\n        print(f\"  \xF0\u0178\u0161\xA8 {alert}\"\
        )\nelse:\n    print(\"[OPTIONS] No unusual activity detected\")\n\nEOF"