name: "24/7 Continuous ML/RL Training"

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
  push:
    branches: ['main']

env:
  VENDOR_DIR: "data/vendor"
  DATA_DIR: "data/logs"
  SYMBOLS: "ES,NQ"  # Train on both ES and NQ symbols

jobs:
  continuous-training:
    runs-on: ubuntu-latest
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        
      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: "📦 Install Dependencies"
        run: |
          pip install --upgrade pip
          pip install torch numpy pandas scikit-learn
          pip install stable-baselines3 ta onnx onnxruntime skl2onnx
          pip install matplotlib seaborn awscli
          
      - name: "🔍 Check Skip Condition"
        id: skip_check
        run: |
          echo "skip=false" >> $GITHUB_OUTPUT
          if [ -f "SKIP_TRAINING" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Training skipped due to SKIP_TRAINING file"
          fi
          
      - name: "📥 Download Training Data"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          mkdir -p ${{ env.DATA_DIR }} ${{ env.VENDOR_DIR }}
          aws s3 sync "s3://${{ secrets.S3_BUCKET }}/logs/" "${{ env.DATA_DIR }}/" \
            --exclude "*" --include "*.parquet" --quiet || echo "No existing data"
          aws s3 sync "s3://${{ secrets.S3_BUCKET }}/vendor/" "${{ env.VENDOR_DIR }}/" \
            --exclude "*" --include "*.parquet" --quiet || echo "No vendor data"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          
      - name: "🧮 Generate Features"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          cd ml
          SYMBOLS="${{ env.SYMBOLS }}" python feature_gen_from_vendor.py
          
      - name: "🔗 Merge Training Data"
        if: steps.skip_check.outputs.skip == 'false'  
        run: |
          cd ml
          python merge_training_data.py ../${{ env.DATA_DIR }} ../${{ env.VENDOR_DIR }}
          
      - name: "🧠 Train Meta Classifier"
        if: steps.skip_check.outputs.skip == 'false'  
        run: |
          cd ml
          python train_meta_classifier.py ../${{ env.DATA_DIR }}/candidates.merged.parquet models
          
      - name: "⚡ Train Execution Predictor"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          cd ml
          python train_exec_quality.py ../${{ env.DATA_DIR }}/candidates.merged.parquet models

      - name: "🤖 Train RL Position Sizer"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          cd ml
          python train_rl_sizer.py ../${{ env.DATA_DIR }}/candidates.merged.parquet models

      - name: "📊 Calculate Checksums"
        if: steps.skip_check.outputs.skip == 'false'
        id: sums
        run: |
          cd ml
          echo "ver=$(date +%Y%m%d_%H%M%S)_${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "meta_sha=$(sha256sum models/meta_model.onnx | cut -d' ' -f1 || echo 'none')" >> $GITHUB_OUTPUT
          echo "exec_sha=$(sha256sum models/exec_model.onnx | cut -d' ' -f1 || echo 'none')" >> $GITHUB_OUTPUT  
          echo "rl_sha=$(sha256sum models/rl_model.onnx | cut -d' ' -f1 || echo 'none')" >> $GITHUB_OUTPUT

      - name: "☁️ Upload Models"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          cd ml
          for model in models/*.onnx; do
            if [ -f "$model" ]; then
              basename_only=$(basename "$model" .onnx)
              aws s3 cp "$model" "s3://${{ secrets.S3_BUCKET }}/models/$basename_only/v${{ steps.sums.outputs.ver }}.onnx"
            fi
          done
          
          for artifact in models/*.pkl models/*.npy; do
            if [ -f "$artifact" ]; then
              aws s3 cp "$artifact" "s3://${{ secrets.S3_BUCKET }}/models/artifacts/$(basename "$artifact")"
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          
      - name: "📋 Create Manifest"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          cd ml
          cat > models/manifest_unsigned.json << 'EOF'
          {
            "version": "${{ steps.sums.outputs.ver }}",
            "timestamp": "2023-12-01T00:00:00Z",
            "training_samples": 1000,
            "models": {
              "meta": {
                "url": "${{ secrets.CDN_BASE_URL }}/models/meta_model/v${{ steps.sums.outputs.ver }}.onnx",
                "checksum": "${{ steps.sums.outputs.meta_sha }}"
              },
              "execution": {
                "url": "${{ secrets.CDN_BASE_URL }}/models/exec_model/v${{ steps.sums.outputs.ver }}.onnx", 
                "checksum": "${{ steps.sums.outputs.exec_sha }}"
              },
              "rl_sizer": {
                "url": "${{ secrets.CDN_BASE_URL }}/models/rl_model/v${{ steps.sums.outputs.ver }}.onnx",
                "checksum": "${{ steps.sums.outputs.rl_sha }}"
              }
            }
          }
          EOF

      - name: "🔐 Sign Manifest"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          cd ml
          python ../tools/sign_manifest.py \
            --manifest models/manifest_unsigned.json \
            --key "${{ secrets.MANIFEST_HMAC_KEY }}" \
            --add-to-manifest
          
          cp models/manifest_unsigned.json models/current.json
          
          aws s3 cp models/current.json "s3://${{ secrets.S3_BUCKET }}/models/current.json" \
            --content-type application/json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          
      - name: "🏁 Summary"
        if: steps.skip_check.outputs.skip == 'false'
        run: |
          echo "🎉 Training Completed!"
          echo "📊 Version: ${{ steps.sums.outputs.ver }}"
          echo "✅ Models uploaded and manifest signed"
