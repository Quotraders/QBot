name: ML/RL Training Pipeline

on:
  schedule:
    # Weekly RL/SAC training (Sundays at 02:00 UTC)
    - cron: '0 2 * * SUN'
    # Monthly cloud model training (1st of month at 03:00 UTC)  
    - cron: '0 3 1 * *'
    # Nightly calibration (daily at 01:00 UTC)
    - cron: '0 1 * * *'
  
  workflow_dispatch:
    inputs:
      training_type:
        description: 'Type of training to run'
        required: true
        default: 'calibration'
        type: choice
        options:
        - calibration
        - rl_weekly
        - cloud_monthly
        - full_retrain
      symbol:
        description: 'Symbol to train (or "all" for all symbols)'
        required: false
        default: 'all'
      force_promotion:
        description: 'Force model promotion (skip thresholds)'
        required: false
        default: false
        type: boolean

# Explicit permissions to follow security best practices
permissions:
  contents: read  # Required for actions/checkout

env:
  DOTNET_VERSION: '8.0'
  PYTHON_VERSION: '3.11'
  
jobs:
  # Data collection step - gather training data from live bus
  data-collection:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      data-available: ${{ steps.check-data.outputs.available }}
      data-path: ${{ steps.collect-data.outputs.path }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --quiet --no-warn-script-location pandas pyarrow azure-storage-blob
        
    - name: Collect training data
      id: collect-data
      env:
        TRAINING_TYPE: ${{ github.event.inputs.training_type || 'scheduled' }}
        TARGET_SYMBOL: ${{ github.event.inputs.symbol || 'all' }}
      run: |
        # Determine data collection window based on training type
        case "$TRAINING_TYPE" in
          "calibration")
            LOOKBACK_DAYS=7
            ;;
          "rl_weekly") 
            LOOKBACK_DAYS=30
            ;;
          "cloud_monthly"|"full_retrain")
            LOOKBACK_DAYS=90
            ;;
          *)
            LOOKBACK_DAYS=7
            ;;
        esac
        
        echo "Collecting $LOOKBACK_DAYS days of data for $TARGET_SYMBOL"
        mkdir -p /tmp/training_data
        echo "Mock training data for $TARGET_SYMBOL" > /tmp/training_data/data.txt
        echo "path=/tmp/training_data" >> $GITHUB_OUTPUT
        
    - name: Check data availability
      id: check-data
      run: |
        if [ -d "/tmp/training_data" ] && [ "$(ls -A /tmp/training_data)" ]; then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "Training data collected successfully"
          ls -la /tmp/training_data/
        else
          echo "available=false" >> $GITHUB_OUTPUT
          echo "No training data available"
        fi
        
    - name: Upload data artifacts
      if: steps.check-data.outputs.available == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: training-data-${{ github.run_id }}
        path: /tmp/training_data/
        retention-days: 30

  # RL training job (CVaR-PPO, SAC)
  rl-training:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: data-collection
    if: |
      needs.data-collection.outputs.data-available == 'true' && 
      (github.event.inputs.training_type == 'rl_weekly' || 
       github.event.inputs.training_type == 'full_retrain' ||
       github.event_name == 'schedule')
    
    strategy:
      matrix:
        symbol: [ES, NQ]
        agent_type: [CVaR_PPO, SAC]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Download training data
      uses: actions/download-artifact@v4
      with:
        name: training-data-${{ github.run_id }}
        path: /tmp/training_data/
        
    - name: Run RL training
      env:
        SYMBOL: ${{ matrix.symbol }}
        AGENT_TYPE: ${{ matrix.agent_type }}
      run: |
        echo "Training $AGENT_TYPE agent for $SYMBOL"
        mkdir -p /tmp/models/$SYMBOL/$AGENT_TYPE
        echo "Mock $AGENT_TYPE model for $SYMBOL" > /tmp/models/$SYMBOL/$AGENT_TYPE/model.bin
          
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rl-model-${{ matrix.symbol }}-${{ matrix.agent_type }}-${{ github.run_id }}
        path: /tmp/models/${{ matrix.symbol }}/${{ matrix.agent_type }}/
        retention-days: 90

  # Notification and reporting
  notify-results:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [data-collection, rl-training]
    if: always()
    
    steps:
    - name: Generate training summary
      run: |
        echo "# ML/RL Training Pipeline Results" > /tmp/summary.md
        echo "" >> /tmp/summary.md
        echo "**Run ID:** ${{ github.run_id }}" >> /tmp/summary.md
        echo "**Triggered by:** ${{ github.event_name }}" >> /tmp/summary.md
        echo "**Training Type:** ${{ github.event.inputs.training_type || 'scheduled' }}" >> /tmp/summary.md
        echo "**Timestamp:** $(date -u)" >> /tmp/summary.md
        echo "" >> /tmp/summary.md
        
        # Add job statuses
        echo "## Job Results" >> /tmp/summary.md
        echo "- Data Collection: ${{ needs.data-collection.result }}" >> /tmp/summary.md
        echo "- RL Training: ${{ needs.rl-training.result }}" >> /tmp/summary.md