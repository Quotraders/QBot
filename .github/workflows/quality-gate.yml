name: Full-Stack Quality Gate ‚Äì Static Only

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1Ô∏è‚É£ Analyzer ‚Äì fail on any violation
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Restore dependencies
        run: dotnet restore

      - name: Build with analyzers
        run: |
          echo "üèó Running analyzer with warnings as errors..."
          dotnet build --configuration Release --no-restore /warnaserror

      # 2Ô∏è‚É£ Guardrails ‚Äì placeholders
      - name: Scan for placeholders
        run: |
          echo "üîç Checking for TODO/STUB/PLACEHOLDER/NotImplementedException..."
          # Look for actual TODO comments (not in documentation) or NotImplementedException
          VIOLATIONS=0
          
          # Check for TODO comments that are not in documentation
          if find ./src -name "*.cs" \
             -exec grep -HnE "^[[:space:]]*//[[:space:]]*TODO[[:space:]]*:" {} \; | head -1; then
            echo "‚ùå Found TODO comment in source code"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Check for NotImplementedException
          if find ./src -name "*.cs" \
             -exec grep -HnE "throw new NotImplementedException" {} \; | head -1; then
            echo "‚ùå Found NotImplementedException in source code" 
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Check for STUB/PLACEHOLDER markers (but not in strings)
          if find ./src -name "*.cs" \
             -exec grep -HnE "^[[:space:]]*//[[:space:]]*(STUB|PLACEHOLDER)[[:space:]]*:" {} \; | head -1; then
            echo "‚ùå Found STUB/PLACEHOLDER comment in source code"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          if [ $VIOLATIONS -gt 0 ]; then
            echo "‚ùå Found $VIOLATIONS placeholder violations ‚Äî remove before committing."
            exit 1
          fi
          
          echo "‚úÖ No placeholder violations found in source code"

      # 3Ô∏è‚É£ Guardrails ‚Äì commented-out code (ignore XML docs)
      - name: Scan for commented-out code
        run: |
          echo "üîç Checking for commented-out code..."
          # Look for actual commented-out C# code patterns, excluding legitimate comments
          if find . -name "*.cs" \
             -not -path "./.git/*" \
             -not -path "./bin/*" \
             -not -path "./obj/*" \
             -exec grep -HnE "^[[:space:]]*//[[:space:]]*[A-Za-z_][A-Za-z0-9_]*[[:space:]]*[(].*[)].*;" {} \; \
             | grep -v "Copyright" \
             | grep -v "License" \
             | head -5; then
            echo "‚ùå Found commented-out code ‚Äî remove or restore before committing."
            exit 1
          fi
          echo "‚úÖ No commented-out code found"

      # 4Ô∏è‚É£ Guardrails ‚Äì hardcoded credentials
      - name: Scan for hardcoded credentials
        run: |
          echo "üîç Checking for hardcoded credentials..."
          # Look for patterns that suggest hardcoded credentials
          if grep -RInE "(api[_-]?key|secret|token|password)[[:space:]]*[:=][[:space:]]*['\"][A-Za-z0-9_\-]{16,}['\"]" \
             --exclude-dir={.git,.github,bin,obj,packages,node_modules} \
             --exclude="*.md" \
             . | grep -v "PLACEHOLDER" | grep -v "YOUR_"; then
            echo "‚ùå Found possible hardcoded credentials ‚Äî move to secure secrets storage."
            exit 1
          fi
          echo "‚úÖ No hardcoded credentials found"

      # 5Ô∏è‚É£ Guardrails ‚Äì hardcoded URLs and configuration
      - name: Scan for hardcoded URLs and configuration
        run: |
          echo "üîç Checking for hardcoded URLs and configuration..."
          # Look for hardcoded URLs that should be environment-driven
          if find . -name "*.cs" \
             -not -path "./.git/*" \
             -not -path "./bin/*" \
             -not -path "./obj/*" \
             -exec grep -HnE "https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}" {} \; \
             | grep -v "GetEnvironmentVariable" \
             | grep -v "example.com" \
             | grep -v "localhost" \
             | head -5; then
            echo "‚ö†Ô∏è Found hardcoded URLs ‚Äî consider making them environment-configurable."
            # Don't fail for this, just warn
          fi

      # 6Ô∏è‚É£ Dead-code detection placeholder
      - name: Dead code scan
        run: |
          echo "üîç Running dead-code detection..."
          # Placeholder for CodeQL or NDepend integration
          echo "üìã Dead-code detection framework ready for integration"
          echo "   Next: Integrate CodeQL query or NDepend analysis to detect:"
          echo "   - Unused classes not reachable from orchestrator entry points"
          echo "   - Private methods with no callers"
          echo "   - Unreferenced assemblies or projects"
          # For now, just check for obvious unused files
          if find . -name "*.cs" -path "./src/*" \
             -exec grep -l "class.*Test\|interface.*Test" {} \; 2>/dev/null | head -1; then
            echo "üìã Found test classes in src/ - consider moving to tests/"
          fi

      # 7Ô∏è‚É£ Security scan for sensitive patterns
      - name: Security pattern scan
        run: |
          echo "üîç Scanning for security anti-patterns..."
          # Check for dangerous patterns
          SECURITY_ISSUES=0
          
          # Check for hardcoded localhost or development URLs in production code
          if find ./src -name "*.cs" -exec grep -l "localhost\|127.0.0.1" {} \; | head -1; then
            echo "‚ö†Ô∏è Found localhost references in src/ code"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for disabled SSL/TLS validation
          if find ./src -name "*.cs" -exec grep -l "IgnoreSSL\|IgnoreCertificate\|AcceptAllCertificates" {} \; | head -1; then
            echo "‚ùå Found disabled SSL/TLS certificate validation"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for SQL injection patterns
          if find ./src -name "*.cs" -exec grep -l "\".*SELECT.*\".*+.*" {} \; | head -1; then
            echo "‚ùå Found potential SQL injection pattern"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if [ $SECURITY_ISSUES -gt 0 ]; then
            echo "‚ùå Security issues found - address before committing"
            exit 1
          fi
          echo "‚úÖ No security anti-patterns found"

      - name: ‚úÖ Quality Gate Passed
        run: |
          echo "üéâ All static quality checks passed!"
          echo "‚úÖ Analyzer-clean (zero violations)"
          echo "‚úÖ Guardrail-compliant (no placeholders/commented code/credentials)"
          echo "‚úÖ Security pattern compliant"
          echo "‚úÖ Ready for development workflow"