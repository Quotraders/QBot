name: "üöÄ Bot Execution Test"

on:
  workflow_dispatch:
    inputs:
      timeout_minutes:
        description: 'Bot execution timeout (minutes)'
        required: false
        default: '5'
        type: string
      dry_run:
        description: 'Enable DRY_RUN mode (paper trading)'
        required: false
        default: true
        type: boolean

permissions:
  contents: read

env:
  TOPSTEPX_API_BASE: "https://api.topstepx.com"
  DOTNET_VERSION: '8.0.x'

jobs:
  run-bot:
    name: "Run Trading Bot"
    runs-on: self-hosted
    timeout-minutes: 15  # Covers max runtime + startup/shutdown buffer
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üîß Setup .NET SDK"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "üîß Setup .NET Environment"
        env:
          TOPSTEPX_API_KEY: ${{ secrets.TOPSTEPX_API_KEY }}
          TOPSTEPX_USERNAME: ${{ secrets.TOPSTEPX_USERNAME }}
          TOPSTEPX_ACCOUNT_ID: ${{ secrets.TOPSTEPX_ACCOUNT_ID }}
          TOPSTEPX_ACCOUNT_NAME: ${{ secrets.TOPSTEPX_ACCOUNT_NAME }}
        run: |
          echo "=================================================="
          echo "üîß .NET Environment Setup"
          echo "=================================================="
          echo ""
          
          # Check .NET installation
          DotnetVersion=$(dotnet --version)
          echo "‚úÖ .NET SDK Version: $DotnetVersion"
          echo ""
          echo "üìã .NET SDK Information:"
          dotnet --info
          echo ""
          
          # Create .env file from secrets
          cat > .env << EOF
          # Trading Mode Configuration
          DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          ENABLE_DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          LIVE_ORDERS=0
          
          # TopstepX API Configuration
          ENABLE_TOPSTEPX=1
          TOPSTEPX_API_BASE=${TOPSTEPX_API_BASE}
          TOPSTEPX_API_KEY=${TOPSTEPX_API_KEY}
          TOPSTEPX_USERNAME=${TOPSTEPX_USERNAME}
          TOPSTEPX_ACCOUNT_ID=${TOPSTEPX_ACCOUNT_ID}
          TOPSTEPX_ACCOUNT_NAME=${TOPSTEPX_ACCOUNT_NAME}
          EOF
          
          echo "‚úÖ Environment configuration created"
          echo ""
          
          # Validate credentials
          if [ -z "${TOPSTEPX_API_KEY}" ] || [ -z "${TOPSTEPX_USERNAME}" ] || [ -z "${TOPSTEPX_ACCOUNT_ID}" ]; then
            echo "‚ùå ERROR: Required TopstepX credentials are missing!"
            exit 1
          fi
          
          echo "üì¶ Restoring NuGet packages..."
          dotnet restore TopstepX.Bot.sln
          
          if [ $? -ne 0 ]; then
            echo "‚ùå NuGet restore failed"
            exit 1
          fi
          
          echo "‚úÖ NuGet restore completed"
          echo ""
          echo "=================================================="

      - name: "üèóÔ∏è Build Solution"
        run: |
          echo "=================================================="
          echo "üèóÔ∏è Building Trading Bot Solution"
          echo "=================================================="
          echo ""
          
          dotnet build src/UnifiedOrchestrator/UnifiedOrchestrator.csproj -c Release --no-restore
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ Build completed successfully"
          echo ""
          echo "=================================================="

      - name: "üîç Verify Build Output"
        run: |
          echo "=================================================="
          echo "üîç Verifying Build Output"
          echo "=================================================="
          echo ""
          
          DLL_PATH="src/UnifiedOrchestrator/bin/Release/net8.0/UnifiedOrchestrator.dll"
          
          if [ -f "$DLL_PATH" ]; then
            FILE_SIZE=$(stat -c%s "$DLL_PATH" 2>/dev/null || stat -f%z "$DLL_PATH" 2>/dev/null)
            FILE_SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $FILE_SIZE / 1048576}")
            echo "‚úÖ Build artifacts verified"
            echo "   UnifiedOrchestrator.dll: $FILE_SIZE_MB MB"
          else
            echo "‚ùå Build artifacts NOT FOUND at: $DLL_PATH"
            exit 1
          fi
          
          echo ""
          echo "=================================================="

      - name: "üöÄ Run Trading Bot"
        id: bot_run
        continue-on-error: true
        run: |
          echo "=================================================="
          echo "üöÄ Starting Trading Bot"
          echo "=================================================="
          echo ""
          
          # Load environment variables
          if [ -f ".env" ]; then
            export $(grep -v '^#' .env | grep -v '^$' | xargs)
          fi
          
          # Override with DRY_RUN from input
          export DRY_RUN="${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}"
          echo "‚ö†Ô∏è DRY_RUN mode: ${{ github.event.inputs.dry_run }}"
          echo ""
          
          # Create log capture directory
          LOG_DIR="/tmp/qbot-bot-run-logs"
          mkdir -p "$LOG_DIR"
          
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          LOG_FILE="$LOG_DIR/bot-run-$TIMESTAMP.log"
          
          echo "üìù Bot output will be captured to: $LOG_FILE"
          echo ""
          echo "Starting bot execution..."
          echo "=================================================="
          echo ""
          
          # Run the bot and capture all output
          dotnet run \
            --project src/UnifiedOrchestrator/UnifiedOrchestrator.csproj \
            --no-build \
            -c Release \
            > >(tee "$LOG_FILE") \
            2>&1 &
          
          BOT_PID=$!
          echo "‚úÖ Process started (PID: $BOT_PID)"
          echo ""
          
          # Wait for process to exit or timeout
          TIMEOUT_SECONDS=120
          CHECK_INTERVAL=10
          ELAPSED=0
          
          echo "‚è±Ô∏è Waiting for bot to complete (timeout: $TIMEOUT_SECONDS seconds)..."
          
          while [ $ELAPSED -lt $TIMEOUT_SECONDS ]; do
            if ! kill -0 $BOT_PID 2>/dev/null; then
              wait $BOT_PID 2>/dev/null
              EXIT_CODE=$?
              break
            fi
            
            sleep $CHECK_INTERVAL
            ELAPSED=$((ELAPSED + CHECK_INTERVAL))
            
            # Show progress every 30 seconds
            if [ $((ELAPSED % 30)) -eq 0 ]; then
              echo "‚è±Ô∏è Still running... ($ELAPSED / $TIMEOUT_SECONDS seconds)"
            fi
          done
          
          # Stop if timeout reached
          if kill -0 $BOT_PID 2>/dev/null; then
            echo ""
            echo "‚è±Ô∏è Bot execution timeout after $TIMEOUT_SECONDS seconds"
            echo "üõë Stopping bot process..."
            
            kill -SIGTERM $BOT_PID 2>/dev/null
            sleep 3
            
            if kill -0 $BOT_PID 2>/dev/null; then
              echo "üî® Force stopping process..."
              kill -SIGKILL $BOT_PID 2>/dev/null
              sleep 2
            fi
            
            EXIT_CODE=-1
          fi
          
          echo ""
          echo "=================================================="
          echo "Bot Execution Summary:"
          echo "  Exit Code: ${EXIT_CODE:-0}"
          echo "  Log File: $LOG_FILE"
          echo "=================================================="
          
          # Output last 100 lines of log
          echo ""
          echo "üìã Last 100 lines of bot output:"
          echo "=================================================="
          tail -100 "$LOG_FILE"
          echo "=================================================="
          
          # Set outputs
          echo "exit_code=${EXIT_CODE:-0}" >> $GITHUB_OUTPUT
          echo "log_file=$LOG_FILE" >> $GITHUB_OUTPUT
          
          if [ "${EXIT_CODE:-0}" -eq 0 ]; then
            echo "‚úÖ Bot executed successfully"
          else
            echo "‚ùå Bot execution failed with exit code: ${EXIT_CODE:-0}"
            exit ${EXIT_CODE:-1}
          fi

      - name: "üìä Execution Summary"
        if: always()
        run: |
          echo "=================================================="
          echo "üìä Bot Execution Test Summary"
          echo "=================================================="
          echo ""
          
          EXIT_CODE="${{ steps.bot_run.outputs.exit_code }}"
          LOG_FILE="${{ steps.bot_run.outputs.log_file }}"
          
          if [ "$EXIT_CODE" = "0" ]; then
            echo "‚úÖ Status: SUCCESS"
            echo "  Bot executed without errors"
          elif [ "$EXIT_CODE" = "-1" ]; then
            echo "‚è±Ô∏è Status: TIMEOUT"
            echo "  Bot execution timed out (expected for continuous operation)"
          else
            echo "‚ùå Status: FAILED"
            echo "  Exit Code: $EXIT_CODE"
            echo "  Check logs for errors"
          fi
          
          echo ""
          echo "üìù Log Location: $LOG_FILE"
          echo ""
          echo "=================================================="
