name: "üöÄ Bot Launch - Self-Hosted Runner"

on:
  workflow_dispatch:
    inputs:
      runtime_minutes:
        description: 'Bot runtime duration (minutes)'
        required: false
        default: '5'
        type: choice
        options:
          - '1'
          - '5'
          - '10'
          - '15'
          - '30'
          - '60'
      log_level:
        description: 'Logging level'
        required: false
        default: 'Information'
        type: choice
        options:
          - 'Debug'
          - 'Information'
          - 'Warning'
          - 'Error'
      dry_run:
        description: 'Enable DRY_RUN mode (paper trading)'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  actions: write

env:
  DOTNET_VERSION: '8.0.x'
  ARTIFACTS_DIR: 'bot-logs'

jobs:
  launch-bot:
    name: "Launch Trading Bot with Full Diagnostics"
    runs-on: [self-hosted, windows, x64]
    timeout-minutes: 70  # Covers max runtime (60min) + startup/shutdown buffer
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üîß Setup .NET SDK"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "üîç System Information"
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üîç SYSTEM INFORMATION"
          Write-Output "=================================================="
          Write-Output ""
          Write-Output "üñ•Ô∏è System Details:"
          Write-Output "  OS: ${{ runner.os }}"
          Write-Output "  Architecture: ${{ runner.arch }}"
          Write-Output "  Runner: Self-hosted Windows"
          Write-Output "  Workflow: ${{ github.workflow }}"
          Write-Output "  Run ID: ${{ github.run_id }}"
          Write-Output ""
          Write-Output "‚öôÔ∏è .NET Environment:"
          dotnet --version
          dotnet --info
          Write-Output ""
          Write-Output "=================================================="

      - name: "üìã Load Environment Configuration"
        shell: pwsh
        env:
          TOPSTEPX_API_KEY: ${{ secrets.TOPSTEPX_API_KEY }}
          TOPSTEPX_USERNAME: ${{ secrets.TOPSTEPX_USERNAME }}
          TOPSTEPX_ACCOUNT_ID: ${{ secrets.TOPSTEPX_ACCOUNT_ID }}
          TOPSTEPX_ACCOUNT_NAME: ${{ secrets.TOPSTEPX_ACCOUNT_NAME }}
        run: |
          Write-Output "=================================================="
          Write-Output "üìã LOADING ENVIRONMENT CONFIGURATION"
          Write-Output "=================================================="
          Write-Output ""
          
          # Create .env file from secrets
          @'
          # ===================================
          # GITHUB CLOUD LEARNING & RL
          # ===================================
          CLOUD_PROVIDER=github
          RL_ENABLED=1
          GITHUB_CLOUD_LEARNING=1
          
          # ===================================
          # AUTO-LEARNING & PROMOTION CONFIG
          # ===================================
          AUTO_PROMOTION_ENABLED=1
          AUTO_LEARNING_ENABLED=1
          CHALLENGER_AUTO_APPROVE=1
          REQUIRE_MANUAL_PROMOTION=0
          MIN_SHADOW_TEST_TRADES=50
          MIN_SHADOW_TEST_SESSIONS=5
          PROMOTION_CONFIDENCE_THRESHOLD=0.65
          ROLLBACK_ON_PERFORMANCE_DECLINE=1
          
          # ===================================
          # TRADING MODE CONFIGURATION
          # ===================================
          DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          ENABLE_DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          LIVE_ORDERS=0
          INSTANT_ALLOW_LIVE=0
          
          # ===================================
          # TOPSTEPX API CONFIGURATION
          # ===================================
          ENABLE_TOPSTEPX=1
          TOPSTEPX_API_BASE=https://api.topstepx.com
          TOPSTEPX_RTC_BASE=https://rtc.topstepx.com
          TOPSTEPX_ADAPTER_MODE=persistent
          TOPSTEPX_API_KEY=${TOPSTEPX_API_KEY}
          TOPSTEPX_USERNAME=${TOPSTEPX_USERNAME}
          TOPSTEPX_ACCOUNT_ID=${TOPSTEPX_ACCOUNT_ID}
          TOPSTEPX_ACCOUNT_NAME=${TOPSTEPX_ACCOUNT_NAME}
          TOPSTEPX_EVAL_ES_ID=CON.F.US.EP.Z25
          TOPSTEPX_EVAL_NQ_ID=CON.F.US.ENQ.Z25
          FORCE_TOPSTEPX_CONNECTION=true
          
          # ===================================
          # LOGGING CONFIGURATION
          # ===================================
          LOG_LEVEL=${{ github.event.inputs.log_level }}
          LOGGING__LOGLEVEL__DEFAULT=${{ github.event.inputs.log_level }}
          LOGGING__LOGLEVEL__SYSTEM=Information
          LOGGING__LOGLEVEL__MICROSOFT=Warning
          
          # ===================================
          # ENHANCED LEARNING CONFIGURATION
          # ===================================
          ENHANCED_LEARNING_ENABLED=1
          MODEL_REGISTRY_ENABLED=1
          CANARY_WATCHDOG_ENABLED=1
          ADAPTIVE_INTELLIGENCE_ENABLED=1
          PROMOTE_TUNER=1
          
          # ===================================
          # WORKFLOW RUNTIME CONFIGURATION
          # ===================================
          WORKFLOW_RUNTIME_MINUTES=${{ github.event.inputs.runtime_minutes }}
          '@ | Out-File -FilePath .env -Encoding UTF8
          
          Write-Output "‚úÖ Environment configuration created"
          Write-Output ""
          
          # Validate required credentials are set
          if ([string]::IsNullOrEmpty($env:TOPSTEPX_API_KEY) -or [string]::IsNullOrEmpty($env:TOPSTEPX_USERNAME) -or [string]::IsNullOrEmpty($env:TOPSTEPX_ACCOUNT_ID)) {
            Write-Output "‚ùå ERROR: Required TopstepX credentials are missing!"
            Write-Output ""
            Write-Output "Please ensure the following secrets are set in GitHub repository settings:"
            Write-Output "  - TOPSTEPX_API_KEY"
            Write-Output "  - TOPSTEPX_USERNAME"
            Write-Output "  - TOPSTEPX_ACCOUNT_ID"
            Write-Output "  - TOPSTEPX_ACCOUNT_NAME (optional)"
            Write-Output ""
            exit 1
          }
          
          Write-Output "‚úÖ TopstepX credentials validated"
          Write-Output ""
          Write-Output "üìä Configuration Summary:"
          Write-Output "  DRY_RUN: ${{ github.event.inputs.dry_run }}"
          Write-Output "  Runtime: ${{ github.event.inputs.runtime_minutes }} minutes"
          Write-Output "  Log Level: ${{ github.event.inputs.log_level }}"
          Write-Output "  TopstepX: Enabled"
          Write-Output ""
          Write-Output "=================================================="

      - name: "üì¶ Restore NuGet Packages"
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üì¶ RESTORING NUGET PACKAGES"
          Write-Output "=================================================="
          Write-Output ""
          
          dotnet restore TopstepX.Bot.sln --verbosity minimal
          
          if ($LASTEXITCODE -ne 0) {
            Write-Output "‚ùå NuGet restore failed"
            exit 1
          }
          
          Write-Output ""
          Write-Output "‚úÖ NuGet restore completed successfully"
          Write-Output ""
          Write-Output "=================================================="

      - name: "üèóÔ∏è Build Trading Bot"
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üèóÔ∏è BUILDING TRADING BOT"
          Write-Output "=================================================="
          Write-Output ""
          
          dotnet build src/UnifiedOrchestrator/UnifiedOrchestrator.csproj `
            -c Release `
            --no-restore `
            -v minimal
          
          if ($LASTEXITCODE -ne 0) {
            Write-Output "‚ùå Build failed"
            exit 1
          }
          
          Write-Output ""
          Write-Output "‚úÖ Build completed successfully"
          Write-Output ""
          Write-Output "=================================================="

      - name: "üîç Verify Build Artifacts"
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üîç VERIFYING BUILD ARTIFACTS"
          Write-Output "=================================================="
          Write-Output ""
          
          $DllPath = "src/UnifiedOrchestrator/bin/Release/net8.0/UnifiedOrchestrator.dll"
          
          if (Test-Path $DllPath) {
            $FileSize = (Get-Item $DllPath).Length
            $FileSizeMB = [math]::Round($FileSize / 1MB, 2)
            Write-Output "‚úÖ UnifiedOrchestrator.dll found"
            Write-Output "   Size: $FileSizeMB MB"
            Write-Output "   Path: $DllPath"
          } else {
            Write-Output "‚ùå UnifiedOrchestrator.dll NOT FOUND"
            Write-Output "   Expected path: $DllPath"
            Write-Output ""
            Write-Output "üìÅ Build output directory:"
            Get-ChildItem "src/UnifiedOrchestrator/bin/Release/net8.0/" -ErrorAction SilentlyContinue | Format-Table
            exit 1
          }
          
          Write-Output ""
          Write-Output "=================================================="

      - name: "üöÄ Launch Trading Bot"
        id: bot_launch
        continue-on-error: true
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üöÄ LAUNCHING TRADING BOT"
          Write-Output "=================================================="
          Write-Output ""
          
          # Create logs directory
          $ArtifactsDir = "${{ env.ARTIFACTS_DIR }}"
          if (-not (Test-Path $ArtifactsDir)) {
            New-Item -ItemType Directory -Path $ArtifactsDir -Force | Out-Null
          }
          
          $Timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
          $LogFile = "$ArtifactsDir/bot-console-$Timestamp.log"
          
          Write-Output "üìù Logs will be saved to: $LogFile"
          Write-Output ""
          
          Write-Output "üéØ Bot Configuration:"
          Write-Output "  Runtime: ${{ github.event.inputs.runtime_minutes }} minutes"
          Write-Output "  Log Level: ${{ github.event.inputs.log_level }}"
          Write-Output "  DRY_RUN: ${{ github.event.inputs.dry_run }}"
          Write-Output ""
          Write-Output "=================================================="
          Write-Output ""
          Write-Output "ü§ñ STARTING BOT..."
          Write-Output ""
          
          # Collect all environment variables to pass to the child process
          Write-Output "üìã Preparing environment variables for bot process..."
          $envVars = @{}
          
          # Copy current environment variables from the step
          Get-ChildItem env: | ForEach-Object {
            $envVars[$_.Name] = $_.Value
          }
          
          # If .env file exists, merge those variables (should have been created in earlier step)
          if (Test-Path ".env") {
            Get-Content .env | ForEach-Object {
              if ($_ -match '^([^#][^=]+)=(.*)$') {
                $key = $matches[1].Trim()
                $value = $matches[2].Trim()
                $envVars[$key] = $value
              }
            }
          }
          
          Write-Output "‚úÖ Environment prepared with $($envVars.Count) variables"
          Write-Output ""
          
          # Start bot in background and capture output with environment variables
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = "dotnet"
          $psi.Arguments = "run --project src/UnifiedOrchestrator/UnifiedOrchestrator.csproj --no-build -c Release"
          $psi.UseShellExecute = $false
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.CreateNoWindow = $true
          
          # Add all environment variables to the process
          foreach ($key in $envVars.Keys) {
            $psi.EnvironmentVariables[$key] = $envVars[$key]
          }
          
          $process = New-Object System.Diagnostics.Process
          $process.StartInfo = $psi
          
          # Setup output redirection
          $outputWriter = [System.IO.StreamWriter]::new($LogFile, $false, [System.Text.Encoding]::UTF8)
          $errorWriter = [System.IO.StreamWriter]::new("$ArtifactsDir/bot-error-$Timestamp.log", $false, [System.Text.Encoding]::UTF8)
          
          $outputHandler = {
            param($sender, $e)
            if ($e.Data -ne $null) {
              $outputWriter.WriteLine($e.Data)
              $outputWriter.Flush()
            }
          }
          
          $errorHandler = {
            param($sender, $e)
            if ($e.Data -ne $null) {
              $errorWriter.WriteLine($e.Data)
              $errorWriter.Flush()
            }
          }
          
          $process.add_OutputDataReceived($outputHandler)
          $process.add_ErrorDataReceived($errorHandler)
          
          # Start the process
          $process.Start() | Out-Null
          $process.BeginOutputReadLine()
          $process.BeginErrorReadLine()
          
          $BotPID = $process.Id
          Write-Output "‚úÖ Bot started (PID: $BotPID)"
          Write-Output ""
          
          # Wait for bot to initialize
          Write-Output "‚è≥ Waiting for initialization (10 seconds)..."
          Start-Sleep -Seconds 10
          
          # Check if process is still running
          if ($process.HasExited) {
          # Check if process is still running
          if ($process.HasExited) {
            Write-Output ""
            Write-Output "‚ùå Bot process exited during initialization!"
            Write-Output ""
            Write-Output "üìã Last 100 lines of output:"
            Write-Output "=================================================="
            # Close writers before reading the file
            try {
              $outputWriter.Close()
              $outputWriter.Dispose()
              $errorWriter.Close()
              $errorWriter.Dispose()
            } catch { }
            Get-Content $LogFile -Tail 100
            Write-Output "=================================================="
            exit 1
          }
          
          Write-Output "‚úÖ Bot is running"
          Write-Output ""
          
          # Calculate timeout
          $RuntimeMinutes = [int]"${{ github.event.inputs.runtime_minutes }}"
          $TimeoutSeconds = $RuntimeMinutes * 60
          $CheckInterval = 10
          $Elapsed = 0
          
          Write-Output "‚è±Ô∏è Bot will run for $RuntimeMinutes minutes..."
          Write-Output ""
          
          # Monitor bot execution
          while ($Elapsed -lt $TimeoutSeconds) {
            # Check if process is still running
            if ($process.HasExited) {
              $ExitCode = $process.ExitCode
              Write-Output ""
              Write-Output "‚ö†Ô∏è Bot process exited (exit code: $ExitCode)"
              
              # Save exit code to output
              "exit_code=$ExitCode" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
              "exit_reason=exited" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
              
              break
            }
            
            # Wait and update progress
            Start-Sleep -Seconds $CheckInterval
            $Elapsed += $CheckInterval
            
            # Show progress every 30 seconds
            if (($Elapsed % 30) -eq 0) {
              $RemainingMinutes = [math]::Round(($TimeoutSeconds - $Elapsed) / 60, 1)
              Write-Output "‚è±Ô∏è Still running... ($RemainingMinutes minutes remaining)"
            }
          }
          
          # Stop bot if still running
          if (-not $process.HasExited) {
          # Stop bot if still running
          if (-not $process.HasExited) {
            Write-Output ""
            Write-Output "‚è±Ô∏è Runtime limit reached ($RuntimeMinutes minutes)"
            Write-Output "üõë Stopping bot gracefully..."
            
            # Try graceful shutdown
            try {
              $process.Kill($false)  # Request graceful shutdown
            } catch {
              Write-Output "‚ö†Ô∏è Graceful shutdown failed, will force kill"
            }
            Start-Sleep -Seconds 5
            
            # Force kill if still running
            if (-not $process.HasExited) {
              Write-Output "üî® Force stopping..."
              try {
                $process.Kill($true)  # Force kill
              } catch {
                Write-Output "‚ö†Ô∏è Force kill failed: $($_.Exception.Message)"
              }
              Start-Sleep -Seconds 2
            }
            
            "exit_code=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
            "exit_reason=timeout" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
            
            Write-Output "‚úÖ Bot stopped"
          }
          
          # Clean up writers
          try {
            $outputWriter.Close()
            $outputWriter.Dispose()
            $errorWriter.Close()
            $errorWriter.Dispose()
          } catch {
            Write-Output "‚ö†Ô∏è Error closing file writers: $($_.Exception.Message)"
          }
          
          Write-Output ""
          Write-Output "=================================================="
          Write-Output "üìä BOT EXECUTION SUMMARY"
          Write-Output "=================================================="
          Write-Output ""
          
          # Show last 200 lines of log
          Write-Output "üìã Last 200 lines of output:"
          Write-Output "=================================================="
          Get-Content $LogFile -Tail 200
          Write-Output "=================================================="
          Write-Output ""

      - name: "üì¶ Package Logs and Artifacts"
        if: always()
        shell: pwsh
        run: |
          Write-Output "=================================================="
          Write-Output "üì¶ PACKAGING LOGS AND ARTIFACTS"
          Write-Output "=================================================="
          Write-Output ""
          
          $ArtifactsDir = "${{ env.ARTIFACTS_DIR }}"
          
          # List all captured files
          if (Test-Path $ArtifactsDir) {
            Write-Output "üìÅ Captured artifacts:"
            Get-ChildItem $ArtifactsDir | Format-Table Name, Length, LastWriteTime
            Write-Output ""
            
            # Create summary file
            $SummaryContent = @"
          Bot Launch Execution Summary
          ================================================
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Run Number: ${{ github.run_number }}
          Triggered By: ${{ github.actor }}
          Timestamp: $(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ" -AsUTC)
          
          Configuration:
          - Runtime: ${{ github.event.inputs.runtime_minutes }} minutes
          - Log Level: ${{ github.event.inputs.log_level }}
          - DRY_RUN: ${{ github.event.inputs.dry_run }}
          
          Execution Results:
          - Exit Code: ${{ steps.bot_launch.outputs.exit_code || 'N/A' }}
          - Exit Reason: ${{ steps.bot_launch.outputs.exit_reason || 'N/A' }}
          
          Runner Information:
          - Type: Self-hosted Windows
          - OS: ${{ runner.os }}
          - Architecture: ${{ runner.arch }}
          ================================================
          "@
            
            $SummaryContent | Out-File -FilePath "$ArtifactsDir/execution-summary.txt" -Encoding UTF8
            
            Write-Output "‚úÖ Execution summary created"
          } else {
            Write-Output "‚ö†Ô∏è Artifacts directory not found"
            New-Item -ItemType Directory -Path $ArtifactsDir -Force | Out-Null
            "Workflow failed during early stage" | Out-File -FilePath "$ArtifactsDir/failure-note.txt" -Encoding UTF8
          }
          
          Write-Output ""
          Write-Output "=================================================="

      - name: "‚¨ÜÔ∏è Upload Logs and Artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bot-logs-run-${{ github.run_number }}
          path: ${{ env.ARTIFACTS_DIR }}
          retention-days: 30
          compression-level: 6

      - name: "üìä Final Report"
        if: always()
        shell: pwsh
        run: |
          Write-Output ""
          Write-Output "=================================================="
          Write-Output "üìä BOT LAUNCH - FINAL REPORT"
          Write-Output "=================================================="
          Write-Output ""
          Write-Output "ü§ñ Execution Summary:"
          Write-Output "  Workflow: ${{ github.workflow }}"
          Write-Output "  Run ID: ${{ github.run_id }}"
          Write-Output "  Run Number: ${{ github.run_number }}"
          Write-Output "  Triggered By: ${{ github.actor }}"
          Write-Output ""
          Write-Output "üìä Results:"
          Write-Output "  Exit Code: ${{ steps.bot_launch.outputs.exit_code || 'N/A' }}"
          Write-Output "  Exit Reason: ${{ steps.bot_launch.outputs.exit_reason || 'N/A' }}"
          Write-Output ""
          Write-Output "üì¶ Artifacts:"
          Write-Output "  Name: bot-logs-run-${{ github.run_number }}"
          Write-Output "  Location: GitHub Actions Artifacts"
          Write-Output "  Retention: 30 days"
          Write-Output "  Access: Actions ‚Üí This run ‚Üí Artifacts section"
          Write-Output ""
          
          $ExitCode = "${{ steps.bot_launch.outputs.exit_code }}"
          $ExitReason = "${{ steps.bot_launch.outputs.exit_reason }}"
          
          if ($ExitReason -eq "timeout") {
            Write-Output "‚úÖ Status: SUCCESS (Completed scheduled runtime)"
            Write-Output ""
            Write-Output "The bot ran for the configured duration and was stopped gracefully."
          } elseif ($ExitCode -eq "0") {
            Write-Output "‚úÖ Status: SUCCESS"
          } else {
            Write-Output "‚ö†Ô∏è Status: COMPLETED WITH ISSUES"
            Write-Output ""
            Write-Output "The bot may have encountered errors. Review the artifacts for details."
          }
          
          Write-Output ""
          Write-Output "üí° Next Steps:"
          Write-Output "  1. Download artifacts from this workflow run"
          Write-Output "  2. Review bot-console-*.log for complete output"
          Write-Output "  3. Check execution-summary.txt for configuration details"
          Write-Output "  4. Investigate any errors or unexpected behavior"
          Write-Output ""
          Write-Output "=================================================="
          Write-Output "‚úÖ WORKFLOW COMPLETE"
          Write-Output "=================================================="
