name: "üöÄ Bot Launch - Self-Hosted Runner"

on:
  workflow_dispatch:
    inputs:
      runtime_minutes:
        description: 'Bot runtime duration (minutes)'
        required: false
        default: '5'
        type: choice
        options:
          - '1'
          - '5'
          - '10'
          - '15'
          - '30'
          - '60'
      log_level:
        description: 'Logging level'
        required: false
        default: 'Information'
        type: choice
        options:
          - 'Debug'
          - 'Information'
          - 'Warning'
          - 'Error'
      dry_run:
        description: 'Enable DRY_RUN mode (paper trading)'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  actions: write

env:
  DOTNET_VERSION: '8.0.x'
  ARTIFACTS_DIR: 'bot-logs'

jobs:
  launch-bot:
    name: "Launch Trading Bot with Full Diagnostics"
    runs-on: [self-hosted, windows, x64]
    timeout-minutes: 70  # Covers max runtime (60min) + startup/shutdown buffer
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üîß Setup .NET SDK"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "üîç System Information"
        run: |
          echo "=================================================="
          echo "üîç SYSTEM INFORMATION"
          echo "=================================================="
          echo ""
          echo "üñ•Ô∏è System Details:"
          echo "  OS: ${{ runner.os }}"
          echo "  Architecture: ${{ runner.arch }}"
          echo "  Runner: GitHub-hosted"
          echo "  Workflow: ${{ github.workflow }}"
          echo "  Run ID: ${{ github.run_id }}"
          echo ""
          echo "‚öôÔ∏è .NET Environment:"
          dotnet --version
          dotnet --info
          echo ""
          echo "=================================================="

      - name: "üìã Load Environment Configuration"
        env:
          TOPSTEPX_API_KEY: ${{ secrets.TOPSTEPX_API_KEY }}
          TOPSTEPX_USERNAME: ${{ secrets.TOPSTEPX_USERNAME }}
          TOPSTEPX_ACCOUNT_ID: ${{ secrets.TOPSTEPX_ACCOUNT_ID }}
          TOPSTEPX_ACCOUNT_NAME: ${{ secrets.TOPSTEPX_ACCOUNT_NAME }}
        run: |
          echo "=================================================="
          echo "üìã LOADING ENVIRONMENT CONFIGURATION"
          echo "=================================================="
          echo ""
          
          # Create .env file from secrets
          cat > .env << 'EOF'
          # ===================================
          # GITHUB CLOUD LEARNING & RL
          # ===================================
          CLOUD_PROVIDER=github
          RL_ENABLED=1
          GITHUB_CLOUD_LEARNING=1
          
          # ===================================
          # AUTO-LEARNING & PROMOTION CONFIG
          # ===================================
          AUTO_PROMOTION_ENABLED=1
          AUTO_LEARNING_ENABLED=1
          CHALLENGER_AUTO_APPROVE=1
          REQUIRE_MANUAL_PROMOTION=0
          MIN_SHADOW_TEST_TRADES=50
          MIN_SHADOW_TEST_SESSIONS=5
          PROMOTION_CONFIDENCE_THRESHOLD=0.65
          ROLLBACK_ON_PERFORMANCE_DECLINE=1
          
          # ===================================
          # TRADING MODE CONFIGURATION
          # ===================================
          DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          ENABLE_DRY_RUN=${{ github.event.inputs.dry_run == 'true' && '1' || '0' }}
          LIVE_ORDERS=0
          INSTANT_ALLOW_LIVE=0
          
          # ===================================
          # TOPSTEPX API CONFIGURATION
          # ===================================
          ENABLE_TOPSTEPX=1
          TOPSTEPX_API_BASE=https://api.topstepx.com
          TOPSTEPX_RTC_BASE=https://rtc.topstepx.com
          TOPSTEPX_ADAPTER_MODE=persistent
          TOPSTEPX_API_KEY=${TOPSTEPX_API_KEY}
          TOPSTEPX_USERNAME=${TOPSTEPX_USERNAME}
          TOPSTEPX_ACCOUNT_ID=${TOPSTEPX_ACCOUNT_ID}
          TOPSTEPX_ACCOUNT_NAME=${TOPSTEPX_ACCOUNT_NAME}
          TOPSTEPX_EVAL_ES_ID=CON.F.US.EP.Z25
          TOPSTEPX_EVAL_NQ_ID=CON.F.US.ENQ.Z25
          FORCE_TOPSTEPX_CONNECTION=true
          
          # ===================================
          # LOGGING CONFIGURATION
          # ===================================
          LOG_LEVEL=${{ github.event.inputs.log_level }}
          LOGGING__LOGLEVEL__DEFAULT=${{ github.event.inputs.log_level }}
          LOGGING__LOGLEVEL__SYSTEM=Information
          LOGGING__LOGLEVEL__MICROSOFT=Warning
          
          # ===================================
          # ENHANCED LEARNING CONFIGURATION
          # ===================================
          ENHANCED_LEARNING_ENABLED=1
          MODEL_REGISTRY_ENABLED=1
          CANARY_WATCHDOG_ENABLED=1
          ADAPTIVE_INTELLIGENCE_ENABLED=1
          PROMOTE_TUNER=1
          
          # ===================================
          # WORKFLOW RUNTIME CONFIGURATION
          # ===================================
          WORKFLOW_RUNTIME_MINUTES=${{ github.event.inputs.runtime_minutes }}
          EOF
          
          echo "‚úÖ Environment configuration created"
          echo ""
          
          # Validate required credentials are set
          if [ -z "${TOPSTEPX_API_KEY}" ] || [ -z "${TOPSTEPX_USERNAME}" ] || [ -z "${TOPSTEPX_ACCOUNT_ID}" ]; then
            echo "‚ùå ERROR: Required TopstepX credentials are missing!"
            echo ""
            echo "Please ensure the following secrets are set in GitHub repository settings:"
            echo "  - TOPSTEPX_API_KEY"
            echo "  - TOPSTEPX_USERNAME"
            echo "  - TOPSTEPX_ACCOUNT_ID"
            echo "  - TOPSTEPX_ACCOUNT_NAME (optional)"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ TopstepX credentials validated"
          echo ""
          echo "üìä Configuration Summary:"
          echo "  DRY_RUN: ${{ github.event.inputs.dry_run }}"
          echo "  Runtime: ${{ github.event.inputs.runtime_minutes }} minutes"
          echo "  Log Level: ${{ github.event.inputs.log_level }}"
          echo "  TopstepX: Enabled"
          echo ""
          echo "=================================================="

      - name: "üì¶ Restore NuGet Packages"
        run: |
          echo "=================================================="
          echo "üì¶ RESTORING NUGET PACKAGES"
          echo "=================================================="
          echo ""
          
          dotnet restore TopstepX.Bot.sln --verbosity minimal
          
          if [ $? -ne 0 ]; then
            echo "‚ùå NuGet restore failed"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ NuGet restore completed successfully"
          echo ""
          echo "=================================================="

      - name: "üèóÔ∏è Build Trading Bot"
        run: |
          echo "=================================================="
          echo "üèóÔ∏è BUILDING TRADING BOT"
          echo "=================================================="
          echo ""
          
          dotnet build src/UnifiedOrchestrator/UnifiedOrchestrator.csproj \
            -c Release \
            --no-restore \
            -v minimal
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ Build completed successfully"
          echo ""
          echo "=================================================="

      - name: "üîç Verify Build Artifacts"
        run: |
          echo "=================================================="
          echo "üîç VERIFYING BUILD ARTIFACTS"
          echo "=================================================="
          echo ""
          
          DLL_PATH="src/UnifiedOrchestrator/bin/Release/net8.0/UnifiedOrchestrator.dll"
          
          if [ -f "$DLL_PATH" ]; then
            FILE_SIZE=$(stat -c%s "$DLL_PATH" 2>/dev/null || stat -f%z "$DLL_PATH" 2>/dev/null)
            FILE_SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $FILE_SIZE / 1048576}")
            echo "‚úÖ UnifiedOrchestrator.dll found"
            echo "   Size: ${FILE_SIZE_MB} MB"
            echo "   Path: $DLL_PATH"
          else
            echo "‚ùå UnifiedOrchestrator.dll NOT FOUND"
            echo "   Expected path: $DLL_PATH"
            echo ""
            echo "üìÅ Build output directory:"
            ls -la src/UnifiedOrchestrator/bin/Release/net8.0/ || echo "Directory not found"
            exit 1
          fi
          
          echo ""
          echo "=================================================="

      - name: "üöÄ Launch Trading Bot"
        id: bot_launch
        continue-on-error: true
        run: |
          echo "=================================================="
          echo "üöÄ LAUNCHING TRADING BOT"
          echo "=================================================="
          echo ""
          
          # Create logs directory
          mkdir -p "${{ env.ARTIFACTS_DIR }}"
          
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          LOG_FILE="${{ env.ARTIFACTS_DIR }}/bot-console-${TIMESTAMP}.log"
          
          echo "üìù Logs will be saved to: $LOG_FILE"
          echo ""
          
          echo "üéØ Bot Configuration:"
          echo "  Runtime: ${{ github.event.inputs.runtime_minutes }} minutes"
          echo "  Log Level: ${{ github.event.inputs.log_level }}"
          echo "  DRY_RUN: ${{ github.event.inputs.dry_run }}"
          echo ""
          echo "=================================================="
          echo ""
          echo "ü§ñ STARTING BOT..."
          echo ""
          
          # Start bot in background and capture output
          dotnet run \
            --project src/UnifiedOrchestrator/UnifiedOrchestrator.csproj \
            --no-build \
            -c Release \
            > >(tee "$LOG_FILE") \
            2>&1 &
          
          BOT_PID=$!
          echo "‚úÖ Bot started (PID: $BOT_PID)"
          echo ""
          
          # Wait for bot to initialize
          echo "‚è≥ Waiting for initialization (10 seconds)..."
          sleep 10
          
          # Check if process is still running
          if ! kill -0 $BOT_PID 2>/dev/null; then
            echo ""
            echo "‚ùå Bot process exited during initialization!"
            echo ""
            echo "üìã Last 100 lines of output:"
            echo "=================================================="
            tail -100 "$LOG_FILE"
            echo "=================================================="
            exit 1
          fi
          
          echo "‚úÖ Bot is running"
          echo ""
          
          # Calculate timeout
          RUNTIME_MINUTES=${{ github.event.inputs.runtime_minutes }}
          TIMEOUT_SECONDS=$((RUNTIME_MINUTES * 60))
          CHECK_INTERVAL=10
          ELAPSED=0
          
          echo "‚è±Ô∏è Bot will run for $RUNTIME_MINUTES minutes..."
          echo ""
          
          # Monitor bot execution
          while [ $ELAPSED -lt $TIMEOUT_SECONDS ]; do
            # Check if process is still running
            if ! kill -0 $BOT_PID 2>/dev/null; then
              WAIT_EXIT=$?
              echo ""
              echo "‚ö†Ô∏è Bot process exited (exit code: $WAIT_EXIT)"
              
              # Save exit code to output
              echo "exit_code=$WAIT_EXIT" >> $GITHUB_OUTPUT
              echo "exit_reason=exited" >> $GITHUB_OUTPUT
              
              break
            fi
            
            # Wait and update progress
            sleep $CHECK_INTERVAL
            ELAPSED=$((ELAPSED + CHECK_INTERVAL))
            
            # Show progress every 30 seconds
            if [ $((ELAPSED % 30)) -eq 0 ]; then
              REMAINING_MINUTES=$(awk "BEGIN {printf \"%.1f\", ($TIMEOUT_SECONDS - $ELAPSED) / 60}")
              echo "‚è±Ô∏è Still running... (${REMAINING_MINUTES} minutes remaining)"
            fi
          done
          
          # Stop bot if still running
          if kill -0 $BOT_PID 2>/dev/null; then
            echo ""
            echo "‚è±Ô∏è Runtime limit reached ($RUNTIME_MINUTES minutes)"
            echo "üõë Stopping bot gracefully..."
            
            # Try graceful shutdown
            kill -SIGTERM $BOT_PID 2>/dev/null
            sleep 5
            
            # Force kill if still running
            if kill -0 $BOT_PID 2>/dev/null; then
              echo "üî® Force stopping..."
              kill -SIGKILL $BOT_PID 2>/dev/null
              sleep 2
            fi
            
            echo "exit_code=0" >> $GITHUB_OUTPUT
            echo "exit_reason=timeout" >> $GITHUB_OUTPUT
            
            echo "‚úÖ Bot stopped"
          fi
          
          echo ""
          echo "=================================================="
          echo "üìä BOT EXECUTION SUMMARY"
          echo "=================================================="
          echo ""
          
          # Show last 200 lines of log
          echo "üìã Last 200 lines of output:"
          echo "=================================================="
          tail -200 "$LOG_FILE"
          echo "=================================================="
          echo ""

      - name: "üì¶ Package Logs and Artifacts"
        if: always()
        run: |
          echo "=================================================="
          echo "üì¶ PACKAGING LOGS AND ARTIFACTS"
          echo "=================================================="
          echo ""
          
          # List all captured files
          if [ -d "${{ env.ARTIFACTS_DIR }}" ]; then
            echo "üìÅ Captured artifacts:"
            ls -lh "${{ env.ARTIFACTS_DIR }}/"
            echo ""
            
            # Create summary file
            cat > "${{ env.ARTIFACTS_DIR }}/execution-summary.txt" << EOF
          Bot Launch Execution Summary
          ================================================
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Run Number: ${{ github.run_number }}
          Triggered By: ${{ github.actor }}
          Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          Configuration:
          - Runtime: ${{ github.event.inputs.runtime_minutes }} minutes
          - Log Level: ${{ github.event.inputs.log_level }}
          - DRY_RUN: ${{ github.event.inputs.dry_run }}
          
          Execution Results:
          - Exit Code: ${{ steps.bot_launch.outputs.exit_code || 'N/A' }}
          - Exit Reason: ${{ steps.bot_launch.outputs.exit_reason || 'N/A' }}
          
          Runner Information:
          - Type: GitHub-hosted (ubuntu-latest)
          - OS: ${{ runner.os }}
          - Architecture: ${{ runner.arch }}
          ================================================
          EOF
            
            echo "‚úÖ Execution summary created"
          else
            echo "‚ö†Ô∏è Artifacts directory not found"
            mkdir -p "${{ env.ARTIFACTS_DIR }}"
            echo "Workflow failed during early stage" > "${{ env.ARTIFACTS_DIR }}/failure-note.txt"
          fi
          
          echo ""
          echo "=================================================="

      - name: "‚¨ÜÔ∏è Upload Logs and Artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bot-logs-run-${{ github.run_number }}
          path: ${{ env.ARTIFACTS_DIR }}
          retention-days: 30
          compression-level: 6

      - name: "üìä Final Report"
        if: always()
        run: |
          echo ""
          echo "=================================================="
          echo "üìä BOT LAUNCH - FINAL REPORT"
          echo "=================================================="
          echo ""
          echo "ü§ñ Execution Summary:"
          echo "  Workflow: ${{ github.workflow }}"
          echo "  Run ID: ${{ github.run_id }}"
          echo "  Run Number: ${{ github.run_number }}"
          echo "  Triggered By: ${{ github.actor }}"
          echo ""
          echo "üìä Results:"
          echo "  Exit Code: ${{ steps.bot_launch.outputs.exit_code || 'N/A' }}"
          echo "  Exit Reason: ${{ steps.bot_launch.outputs.exit_reason || 'N/A' }}"
          echo ""
          echo "üì¶ Artifacts:"
          echo "  Name: bot-logs-run-${{ github.run_number }}"
          echo "  Location: GitHub Actions Artifacts"
          echo "  Retention: 30 days"
          echo "  Access: Actions ‚Üí This run ‚Üí Artifacts section"
          echo ""
          
          EXIT_CODE="${{ steps.bot_launch.outputs.exit_code }}"
          EXIT_REASON="${{ steps.bot_launch.outputs.exit_reason }}"
          
          if [ "$EXIT_REASON" = "timeout" ]; then
            echo "‚úÖ Status: SUCCESS (Completed scheduled runtime)"
            echo ""
            echo "The bot ran for the configured duration and was stopped gracefully."
          elif [ "$EXIT_CODE" = "0" ]; then
            echo "‚úÖ Status: SUCCESS"
          else
            echo "‚ö†Ô∏è Status: COMPLETED WITH ISSUES"
            echo ""
            echo "The bot may have encountered errors. Review the artifacts for details."
          fi
          
          echo ""
          echo "üí° Next Steps:"
          echo "  1. Download artifacts from this workflow run"
          echo "  2. Review bot-console-*.log for complete output"
          echo "  3. Check execution-summary.txt for configuration details"
          echo "  4. Investigate any errors or unexpected behavior"
          echo ""
          echo "=================================================="
          echo "‚úÖ WORKFLOW COMPLETE"
          echo "=================================================="
