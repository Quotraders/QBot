name: Market Regime Detection (Team)
on:
  schedule:
  - cron: '*/20 * * * *'
  workflow_dispatch: null
permissions:
  contents: read
  actions: read
jobs:
  detect-regime:
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        cache: pip
    - name: Install Dependencies
      run: 'pip install --upgrade pip

        pip install yfinance pandas numpy scikit-learn

        '
    - name: Detect Market Regime
      run: "python << 'EOF'\nimport yfinance as yf\nimport pandas as pd\nimport numpy\
        \ as np\nimport json\nfrom datetime import datetime\nimport os\n\nprint(f\"\
        [REGIME] Starting regime detection at {datetime.utcnow()}\")\n\ntry:\n   \
        \ # Get SPY data for regime detection\n    spy = yf.Ticker('SPY')\n    data\
        \ = spy.history(period='1mo', interval='1d')\n    \n    if len(data) > 10:\n\
        \        # Calculate indicators for regime detection\n        data['returns']\
        \ = data['Close'].pct_change()\n        data['volatility'] = data['returns'].rolling(10).std()\n\
        \        data['sma_20'] = data['Close'].rolling(20).mean()\n        data['price_position']\
        \ = (data['Close'] - data['sma_20']) / data['sma_20']\n        \n        #\
        \ Current values\n        latest = data.iloc[-1]\n        recent_vol = data['volatility'].tail(5).mean()\n\
        \        recent_returns = data['returns'].tail(5).mean()\n        price_trend\
        \ = latest['price_position']\n        \n        # Regime classification\n\
        \        if recent_vol > 0.02:  # High volatility threshold\n            if\
        \ abs(recent_returns) > 0.01:\n                regime = \"HIGH_VOLATILITY_TRENDING\"\
        \n            else:\n                regime = \"HIGH_VOLATILITY_CHOPPY\"\n\
        \        else:  # Low volatility\n            if price_trend > 0.02:\n   \
        \             regime = \"LOW_VOLATILITY_BULLISH\"\n            elif price_trend\
        \ < -0.02:\n                regime = \"LOW_VOLATILITY_BEARISH\"\n        \
        \    else:\n                regime = \"LOW_VOLATILITY_NEUTRAL\"\n        \n\
        \        # Calculate confidence\n        vol_confidence = min(1.0, recent_vol\
        \ / 0.03)\n        trend_confidence = min(1.0, abs(price_trend) / 0.05)\n\
        \        overall_confidence = (vol_confidence + trend_confidence) / 2\n  \
        \      \n        regime_data = {\n            'timestamp': datetime.utcnow().isoformat(),\n\
        \            'regime': regime,\n            'confidence': float(overall_confidence),\n\
        \            'metrics': {\n                'volatility': float(recent_vol),\n\
        \                'returns': float(recent_returns),\n                'price_position':\
        \ float(price_trend),\n                'current_price': float(latest['Close'])\n\
        \            },\n            'interpretation': {\n                'volatility_level':\
        \ 'HIGH' if recent_vol > 0.02 else 'LOW',\n                'trend_direction':\
        \ 'UP' if price_trend > 0.02 else 'DOWN' if price_trend < -0.02 else 'NEUTRAL',\n\
        \                'market_stress': 'HIGH' if recent_vol > 0.025 else 'NORMAL'\n\
        \            }\n        }\n        \n        # Save regime data\n        os.makedirs('data/regime',\
        \ exist_ok=True)\n        with open('data/regime/current.json', 'w') as f:\n\
        \            json.dump(regime_data, f, indent=2)\n        \n        print(f\"\
        [REGIME] Current regime: {regime}\")\n        print(f\"[REGIME] Confidence:\
        \ {overall_confidence:.2f}\")\n        print(f\"[REGIME] Volatility: {recent_vol:.3f},\
        \ Trend: {price_trend:.3f}\")\n        \n    else:\n        print(\"[REGIME]\
        \ Insufficient data for regime detection\")\n        \nexcept Exception as\
        \ e:\n    print(f\"[REGIME] Error: {e}\")\n    \n    # Create fallback regime\
        \ data\n    fallback_data = {\n        'timestamp': datetime.utcnow().isoformat(),\n\
        \        'regime': 'UNKNOWN',\n        'confidence': 0.0,\n        'error':\
        \ str(e)\n    }\n    \n    os.makedirs('data/regime', exist_ok=True)\n   \
        \ with open('data/regime/current.json', 'w') as f:\n        json.dump(fallback_data,\
        \ f, indent=2)\n\nEOF"
    runs-on: ubuntu-latest
'on':
  workflow_dispatch: {}
