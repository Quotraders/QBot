name: "🤖 Cloud Bot Mechanic - System Health Monitor"

"on":
  schedule:
    # 24/7 SYSTEM HEALTH MONITORING (ENTERPRISE RELIABILITY)
    # Continuous monitoring with higher frequency during active trading
    - cron: '0 */2 * * *'           # Every 2 hours base monitoring
    - cron: '*/30 14-22 * * 1-5'    # Every 30 min during US trading hours
    - cron: '0 */4 0-6 * * *'       # Every 4 hours during Asian session
    - cron: '0 */3 8-12 * * *'      # Every 3 hours during European session
    # Total: ~24 runs/day = Continuous system health monitoring
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: false
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - deep
          - recovery

permissions:
  contents: write
  actions: read
  issues: write

env:
  CHECK_TYPE: ${{ github.event.inputs.check_type || 'full' }}

jobs:
  system-health-monitor:
    name: "Cloud Bot Mechanic - System Health Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install pandas numpy requests psutil yfinance feedparser
        
    - name: System Health Diagnostics
      run: |
        python << 'EOF'
        import json
        import os
        import time
        from datetime import datetime, timedelta
        import subprocess
        
        print(f"[MECHANIC] 🤖 Cloud Bot Mechanic starting health check at {datetime.utcnow()}")
        
        # Create directories
        os.makedirs("Intelligence/data/health", exist_ok=True)
        
        health_status = {
            'timestamp': datetime.utcnow().isoformat(),
            'system_status': 'CHECKING',
            'components': {},
            'alerts': [],
            'recommendations': [],
            'uptime_metrics': {}
        }
        
        # Check GitHub Actions workflow status
        workflow_health = {
            'total_workflows': 0,
            'active_workflows': 0,
            'failed_workflows': 0,
            'last_run_times': {}
        }
        
        # Count and analyze workflows
        workflow_dir = ".github/workflows"
        if os.path.exists(workflow_dir):
            workflow_files = [f for f in os.listdir(workflow_dir) if f.endswith('.yml')]
            workflow_health['total_workflows'] = len(workflow_files)
            
            # Check for recent workflow runs by looking at git commits
            try:
                result = subprocess.run(['git', 'log', '--oneline', '--since=24 hours ago'], 
                                      capture_output=True, text=True)
                recent_commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
                workflow_health['recent_activity'] = len(recent_commits)
            except:
                workflow_health['recent_activity'] = 0
        
        health_status['components']['workflows'] = workflow_health
        
        # Test API endpoints
        api_tests = {}
        
        # Test Yahoo Finance API
        try:
            import yfinance as yf
            test_ticker = yf.Ticker("SPY")
            test_data = test_ticker.history(period="1d")
            if not test_data.empty:
                api_tests['yahoo_finance'] = {
                    'status': 'OK',
                    'response_time': 'N/A',
                    'last_price': float(test_data['Close'].iloc[-1])
                }
            else:
                api_tests['yahoo_finance'] = {
                    'status': 'NO_DATA',
                    'error': 'Empty response'
                }
        except Exception as e:
            api_tests['yahoo_finance'] = {
                'status': 'ERROR',
                'error': str(e)
            }
        
        # Test RSS feeds
        try:
            import feedparser
            test_feed = feedparser.parse("https://finance.yahoo.com/rss/topfinstories")
            if len(test_feed.entries) > 0:
                api_tests['yahoo_rss'] = {
                    'status': 'OK',
                    'article_count': len(test_feed.entries),
                    'latest_title': test_feed.entries[0].get('title', 'N/A')[:100]
                }
            else:
                api_tests['yahoo_rss'] = {
                    'status': 'NO_DATA',
                    'error': 'No RSS entries'
                }
        except Exception as e:
            api_tests['yahoo_rss'] = {
                'status': 'ERROR',
                'error': str(e)
            }
        
        health_status['components']['api_endpoints'] = api_tests
        
        # Generate alerts and recommendations
        alerts = []
        recommendations = []
        
        # Check API health
        for api_name, api_info in api_tests.items():
            if api_info['status'] == 'ERROR':
                alerts.append(f"API error in {api_name}: {api_info['error']}")
        
        # Generate recommendations
        if workflow_health['recent_activity'] < 5:
            recommendations.append("Low workflow activity - check if schedules are running correctly")
        
        if len(alerts) == 0:
            recommendations.append("All systems operational - continue monitoring")
        else:
            recommendations.append(f"Address {len(alerts)} system alerts for optimal performance")
        
        # Determine overall system status
        if len(alerts) == 0:
            health_status['system_status'] = 'HEALTHY'
        elif len(alerts) <= 2:
            health_status['system_status'] = 'WARNING'
        else:
            health_status['system_status'] = 'CRITICAL'
        
        health_status['alerts'] = alerts
        health_status['recommendations'] = recommendations
        
        # Save health status
        with open("Intelligence/data/health/system_status.json", 'w') as f:
            json.dump(health_status, f, indent=2)
        
        # Create summary report
        print(f"[MECHANIC] 🏥 System Status: {health_status['system_status']}")
        print(f"[MECHANIC] 📊 Workflows: {workflow_health['total_workflows']} total")
        print(f"[MECHANIC] 🌐 APIs: {len([a for a in api_tests.values() if a['status'] == 'OK'])} working")
        print(f"[MECHANIC] ⚠️  Alerts: {len(alerts)}")
        print(f"[MECHANIC] 💡 Recommendations: {len(recommendations)}")
        
        if alerts:
            print("[MECHANIC] 🚨 ALERTS:")
            for alert in alerts:
                print(f"  - {alert}")
        
        if recommendations:
            print("[MECHANIC] 💡 RECOMMENDATIONS:")
            for rec in recommendations:
                print(f"  - {rec}")
        
        EOF

    - name: "🔗 Integrate with BotCore Decision Engine"
      run: |
        echo "🔗 Converting system health data to BotCore format..."
        
        # Create system health data for BotCore integration
        python << 'EOF'
        import json
        import os
        from datetime import datetime
        
        # Load the health status
        try:
            with open("Intelligence/data/health/system_status.json", 'r') as f:
                health_data = json.load(f)
        except:
            health_data = {
                'system_status': 'UNKNOWN',
                'components': {},
                'alerts': [],
                'timestamp': datetime.utcnow().isoformat()
            }
        
        # Convert to BotCore format
        botcore_health = {
            "SystemHealth": {
                "Status": health_data.get('system_status', 'UNKNOWN'),
                "Timestamp": health_data.get('timestamp', datetime.utcnow().isoformat()),
                "WorkflowCount": health_data.get('components', {}).get('workflows', {}).get('total_workflows', 0),
                "APIStatus": {
                    api_name: api_info.get('status', 'UNKNOWN') 
                    for api_name, api_info in health_data.get('components', {}).get('api_endpoints', {}).items()
                },
                "AlertCount": len(health_data.get('alerts', [])),
                "Alerts": health_data.get('alerts', []),
                "Recommendations": health_data.get('recommendations', [])
            }
        }
        
        # Save BotCore compatible format
        os.makedirs("Intelligence/data/integrated", exist_ok=True)
        with open("Intelligence/data/integrated/system_health.json", 'w') as f:
            json.dump(botcore_health, f, indent=2)
        
        print("✅ BotCore system health integration complete")
        EOF

    - name: "📤 Commit Health Data"
      run: |
        git config user.name "Cloud Bot Mechanic"
        git config user.email "mechanic@github.com"
        git add Intelligence/data/health/
        git add Intelligence/data/integrated/
        git diff --quiet || git commit -m "🤖 Cloud Bot Mechanic: System health monitoring $(date -u +%Y%m%d_%H%M%S)"
        git push || echo "No changes to push"
