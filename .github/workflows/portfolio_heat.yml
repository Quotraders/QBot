name: Portfolio Heat Management (Team)
true:
  schedule:
  - cron: '*/30 23 * * 0'
  - cron: '*/30 0-6 * * 1-5'
  - cron: '*/30 7-13 * * 1-5'
  - cron: '*/15 14-21 * * 1-5'
  - cron: '*/20 21-23 * * 1-4'
  - cron: '*/20 21-22 * * 5'
  - cron: 0 0,6,12,18 * * 6,0
  workflow_dispatch: null
permissions:
  contents: read
  actions: read
jobs:
  manage-heat:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: pip
    - name: Install Dependencies
      run: 'pip install --upgrade pip

        pip install pandas numpy json-logging

        '
    - name: Calculate Portfolio Heat
      run: "python << 'EOF'\nimport json\nimport os\nfrom datetime import datetime\n\
        import numpy as np\n\nprint(f\"[HEAT] Starting portfolio heat calculation\
        \ at {datetime.utcnow()}\")\n\n# Load existing data sources\nmarket_data =\
        \ {}\nregime_data = {}\n\n# Try to load market data\ntry:\n    if os.path.exists('data/es_nq/latest_analysis.json'):\n\
        \        with open('data/es_nq/latest_analysis.json', 'r') as f:\n       \
        \     market_data = json.load(f)\nexcept:\n    pass\n\n# Try to load regime\
        \ data\ntry:\n    if os.path.exists('data/regime/current.json'):\n       \
        \ with open('data/regime/current.json', 'r') as f:\n            regime_data\
        \ = json.load(f)\nexcept:\n    pass\n\n# Calculate portfolio heat metrics\n\
        heat_score = 0.5  # Base heat level\nmax_position_size = 1.0  # Base position\
        \ size\nrisk_multiplier = 1.0\n\n# Adjust based on market volatility\nif market_data:\n\
        \    for symbol, data in market_data.items():\n        if 'volatility' in\
        \ data:\n            vol = data['volatility']\n            if vol > 2.0: \
        \ # High volatility\n                heat_score += 0.2\n            elif vol\
        \ > 1.5:\n                heat_score += 0.1\n\n# Adjust based on regime\n\
        if regime_data:\n    regime = regime_data.get('regime', 'UNKNOWN')\n    if\
        \ 'HIGH_VOLATILITY' in regime:\n        heat_score += 0.3\n        max_position_size\
        \ *= 0.7  # Reduce position size\n    elif 'BEARISH' in regime:\n        heat_score\
        \ += 0.2\n        max_position_size *= 0.8\n    elif 'BULLISH' in regime:\n\
        \        heat_score -= 0.1\n        max_position_size *= 1.1\n\n# Cap heat\
        \ score\nheat_score = max(0.0, min(1.0, heat_score))\nmax_position_size =\
        \ max(0.1, min(2.0, max_position_size))\n\n# Determine risk level\nif heat_score\
        \ < 0.3:\n    risk_level = \"LOW\"\n    risk_color = \"\xF0\u0178\u0178\xA2\
        \"\nelif heat_score < 0.6:\n    risk_level = \"MEDIUM\"\n    risk_color =\
        \ \"\xF0\u0178\u0178\xA1\"\nelif heat_score < 0.8:\n    risk_level = \"HIGH\"\
        \n    risk_color = \"\xF0\u0178\u0178\_\"\nelse:\n    risk_level = \"EXTREME\"\
        \n    risk_color = \"\xF0\u0178\u201D\xB4\"\n\n# Calculate recommended actions\n\
        recommendations = []\nif heat_score > 0.7:\n    recommendations.append(\"\
        REDUCE_POSITIONS\")\n    recommendations.append(\"INCREASE_STOPS\")\nelif\
        \ heat_score > 0.5:\n    recommendations.append(\"MONITOR_CLOSELY\")\nelse:\n\
        \    recommendations.append(\"NORMAL_OPERATIONS\")\n\n# Portfolio heat data\n\
        heat_data = {\n    'timestamp': datetime.utcnow().isoformat(),\n    'heat_score':\
        \ float(heat_score),\n    'risk_level': risk_level,\n    'max_position_size':\
        \ float(max_position_size),\n    'risk_multiplier': float(risk_multiplier),\n\
        \    'recommendations': recommendations,\n    'metrics': {\n        'market_volatility_impact':\
        \ bool(market_data),\n        'regime_impact': bool(regime_data),\n      \
        \  'current_regime': regime_data.get('regime', 'UNKNOWN') if regime_data else\
        \ 'UNKNOWN'\n    },\n    'alerts': {\n        'high_heat': heat_score > 0.7,\n\
        \        'extreme_heat': heat_score > 0.8,\n        'regime_change': False\
        \  # Could be enhanced with historical data\n    }\n}\n\n# Save heat data\n\
        os.makedirs('data/portfolio', exist_ok=True)\nwith open('data/portfolio/heat_management.json',\
        \ 'w') as f:\n    json.dump(heat_data, f, indent=2)\n\nprint(f\"[HEAT] {risk_color}\
        \ Portfolio Heat: {heat_score:.2f} ({risk_level})\")\nprint(f\"[HEAT] Max\
        \ Position Size: {max_position_size:.2f}x\")\nprint(f\"[HEAT] Recommendations:\
        \ {', '.join(recommendations)}\")\n\nif heat_data['alerts']['high_heat']:\n\
        \    print(\"\xF0\u0178\u0161\xA8 [ALERT] High portfolio heat detected!\"\
        )\n\nEOF"
