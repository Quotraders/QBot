name: News & Sentiment (Team)

on:
  schedule:
    # OPTIMIZED EST MARKET TIMING
    # Pre-market (7-9:30am EST = 12-14:30 UTC)
    - cron: '*/20 12-14 * * 1-5'    # Every 20min pre-market 
    # Active market hours (9:30am-4pm EST = 14:30-21 UTC) 
    - cron: '*/15 14-21 * * 1-5'    # Every 15min during market hours
    # Post-market (4-6pm EST = 21-23 UTC)
    - cron: '*/30 21-23 * * 1-5'    # Every 30min post-market
    # Weekends reduced frequency
    - cron: '0 */3 * * 0,6'         # Every 3 hours on weekends
  workflow_dispatch:

permissions:
  contents: read
  actions: read

jobs:
  analyze-news:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install feedparser requests beautifulsoup4 pandas
        
    - name: Analyze News & Sentiment
      run: |
        python << 'EOF'
        import feedparser
        import json
        import re
        from datetime import datetime
        import os
        
        print(f"[NEWS] Starting sentiment analysis at {datetime.utcnow()}")
        
        # Financial news RSS feeds
        feeds = [
            "https://feeds.finance.yahoo.com/rss/2.0/headline",
            "https://finance.yahoo.com/news/rssindex"
        ]
        
        all_articles = []
        sentiment_scores = []
        
        for feed_url in feeds:
            try:
                feed = feedparser.parse(feed_url)
                
                for entry in feed.entries[:10]:  # Limit to 10 per feed
                    title = entry.get('title', '')
                    summary = entry.get('summary', '')
                    full_text = f"{title} {summary}".lower()
                    
                    # Simple sentiment analysis
                    bullish_words = ['rally', 'gain', 'up', 'surge', 'bull', 'buy', 'positive', 'growth']
                    bearish_words = ['fall', 'drop', 'down', 'crash', 'bear', 'sell', 'negative', 'decline']
                    
                    bullish_count = sum(1 for word in bullish_words if word in full_text)
                    bearish_count = sum(1 for word in bearish_words if word in full_text)
                    
                    # Calculate sentiment score (-1 to 1)
                    if bullish_count + bearish_count > 0:
                        sentiment = (bullish_count - bearish_count) / (bullish_count + bearish_count)
                    else:
                        sentiment = 0
                    
                    article_data = {
                        'title': title,
                        'summary': summary[:200],
                        'sentiment': sentiment,
                        'published': entry.get('published', ''),
                        'source': 'yahoo_finance'
                    }
                    
                    all_articles.append(article_data)
                    sentiment_scores.append(sentiment)
                    
            except Exception as e:
                print(f"[NEWS] Error processing feed {feed_url}: {e}")
        
        # Calculate aggregate sentiment
        avg_sentiment = sum(sentiment_scores) / len(sentiment_scores) if sentiment_scores else 0
        
        # Categorize market sentiment
        if avg_sentiment > 0.2:
            market_sentiment = "BULLISH"
        elif avg_sentiment < -0.2:
            market_sentiment = "BEARISH"
        else:
            market_sentiment = "NEUTRAL"
        
        # Save sentiment data
        sentiment_data = {
            'timestamp': datetime.utcnow().isoformat(),
            'article_count': len(all_articles),
            'avg_sentiment': avg_sentiment,
            'market_sentiment': market_sentiment,
            'sentiment_distribution': {
                'bullish': len([s for s in sentiment_scores if s > 0.1]),
                'bearish': len([s for s in sentiment_scores if s < -0.1]),
                'neutral': len([s for s in sentiment_scores if -0.1 <= s <= 0.1])
            },
            'recent_articles': all_articles[:5]  # Top 5 articles
        }
        
        os.makedirs('data/sentiment', exist_ok=True)
        with open('data/sentiment/latest.json', 'w') as f:
            json.dump(sentiment_data, f, indent=2)
        
        print(f"[NEWS] Processed {len(all_articles)} articles")
        print(f"[NEWS] Average sentiment: {avg_sentiment:.2f} ({market_sentiment})")
        print(f"[NEWS] Distribution - Bullish: {sentiment_data['sentiment_distribution']['bullish']}, "
              f"Bearish: {sentiment_data['sentiment_distribution']['bearish']}, "
              f"Neutral: {sentiment_data['sentiment_distribution']['neutral']}")
        
        EOF