name: News & Sentiment (Team)
on:
  schedule:
  - cron: '*/15 13-14 * * 1-5'
  - cron: 0 15,16,18,19,20 * * 1-5
  - cron: '*/30 * * * 0,6'
  workflow_dispatch: null

permissions:
  contents: read
  actions: read
jobs:
  analyze-news:
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        cache: pip
    - name: Install Dependencies
      run: 'pip install --upgrade pip

        pip install feedparser requests beautifulsoup4 pandas

        '
    - name: Analyze News & Sentiment
      run: "python << 'EOF'\nimport feedparser\nimport json\nimport re\nfrom datetime\
        \ import datetime\nimport os\n\nprint(f\"[NEWS] Starting sentiment analysis\
        \ at {datetime.utcnow()}\")\n\n# Financial news RSS feeds\nfeeds = [\n   \
        \ \"https://feeds.finance.yahoo.com/rss/2.0/headline\",\n    \"https://finance.yahoo.com/news/rssindex\"\
        \n]\n\nall_articles = []\nsentiment_scores = []\n\nfor feed_url in feeds:\n\
        \    try:\n        feed = feedparser.parse(feed_url)\n        \n        for\
        \ entry in feed.entries[:10]:  # Limit to 10 per feed\n            title =\
        \ entry.get('title', '')\n            summary = entry.get('summary', '')\n\
        \            full_text = f\"{title} {summary}\".lower()\n            \n  \
        \          # Simple sentiment analysis\n            bullish_words = ['rally',\
        \ 'gain', 'up', 'surge', 'bull', 'buy', 'positive', 'growth']\n          \
        \  bearish_words = ['fall', 'drop', 'down', 'crash', 'bear', 'sell', 'negative',\
        \ 'decline']\n            \n            bullish_count = sum(1 for word in\
        \ bullish_words if word in full_text)\n            bearish_count = sum(1 for\
        \ word in bearish_words if word in full_text)\n            \n            #\
        \ Calculate sentiment score (-1 to 1)\n            if bullish_count + bearish_count\
        \ > 0:\n                sentiment = (bullish_count - bearish_count) / (bullish_count\
        \ + bearish_count)\n            else:\n                sentiment = 0\n   \
        \         \n            article_data = {\n                'title': title,\n\
        \                'summary': summary[:200],\n                'sentiment': sentiment,\n\
        \                'published': entry.get('published', ''),\n              \
        \  'source': 'yahoo_finance'\n            }\n            \n            all_articles.append(article_data)\n\
        \            sentiment_scores.append(sentiment)\n            \n    except\
        \ Exception as e:\n        print(f\"[NEWS] Error processing feed {feed_url}:\
        \ {e}\")\n\n# Calculate aggregate sentiment\navg_sentiment = sum(sentiment_scores)\
        \ / len(sentiment_scores) if sentiment_scores else 0\n\n# Categorize market\
        \ sentiment\nif avg_sentiment > 0.2:\n    market_sentiment = \"BULLISH\"\n\
        elif avg_sentiment < -0.2:\n    market_sentiment = \"BEARISH\"\nelse:\n  \
        \  market_sentiment = \"NEUTRAL\"\n\n# Save sentiment data\nsentiment_data\
        \ = {\n    'timestamp': datetime.utcnow().isoformat(),\n    'article_count':\
        \ len(all_articles),\n    'avg_sentiment': avg_sentiment,\n    'market_sentiment':\
        \ market_sentiment,\n    'sentiment_distribution': {\n        'bullish': len([s\
        \ for s in sentiment_scores if s > 0.1]),\n        'bearish': len([s for s\
        \ in sentiment_scores if s < -0.1]),\n        'neutral': len([s for s in sentiment_scores\
        \ if -0.1 <= s <= 0.1])\n    },\n    'recent_articles': all_articles[:5] \
        \ # Top 5 articles\n}\n\nos.makedirs('data/sentiment', exist_ok=True)\nwith\
        \ open('data/sentiment/latest.json', 'w') as f:\n    json.dump(sentiment_data,\
        \ f, indent=2)\n\nprint(f\"[NEWS] Processed {len(all_articles)} articles\"\
        )\nprint(f\"[NEWS] Average sentiment: {avg_sentiment:.2f} ({market_sentiment})\"\
        )\nprint(f\"[NEWS] Distribution - Bullish: {sentiment_data['sentiment_distribution']['bullish']},\
        \ \"\n      f\"Bearish: {sentiment_data['sentiment_distribution']['bearish']},\
        \ \"\n      f\"Neutral: {sentiment_data['sentiment_distribution']['neutral']}\"\
        )\n\nEOF"