name: Monthly ML Training Pipeline

on:
  schedule:
    # Run on the 1st of every month at 02:00 UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      force_training:
        description: 'Force training even if criteria not met'
        required: false
        default: 'false'
        type: boolean
      lookback_months:
        description: 'Months of historical data'
        required: false
        default: '24'
        type: string

jobs:
  monthly-training:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        cd ml
        pip install -r requirements.txt
        
    - name: Create data directories
      run: |
        mkdir -p data/raw/bars data/raw/signals data/raw/trades
        mkdir -p data/registry data/local_models
        mkdir -p models reports
        
    - name: Download historical data
      run: |
        echo "Historical data download would go here"
        # TODO: Implement actual data download from your data provider
        # This might involve calling TopstepX APIs or other data sources
        
    - name: Build training dataset
      run: |
        cd ml
        python -m train_monthly build-dataset --since-months ${{ github.event.inputs.lookback_months || '24' }}
        
    - name: Run monthly training with walk-forward CV
      id: training
      run: |
        cd ml
        python -m train_monthly train-monthly
        echo "training_result=$?" >> $GITHUB_OUTPUT
        
    - name: Check training results
      run: |
        if [ "${{ steps.training.outputs.training_result }}" -eq 0 ]; then
          echo "✅ Training successful - model promoted"
        else
          echo "❌ Training completed but model not promoted"
          if [ "${{ github.event.inputs.force_training }}" != "true" ]; then
            exit 1
          fi
        fi
        
    - name: Upload training artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: training-artifacts-${{ github.run_number }}
        path: |
          models/
          data/registry/
          reports/
          ml/logs/
        retention-days: 30
        
    - name: Create training report
      run: |
        mkdir -p reports
        cat > reports/monthly-training-${{ github.run_number }}.md << EOF
        # Monthly Training Report - $(date)
        
        ## Training Configuration
        - Lookback months: ${{ github.event.inputs.lookback_months || '24' }}
        - Force training: ${{ github.event.inputs.force_training || 'false' }}
        - Triggered by: ${{ github.event_name }}
        
        ## Results
        - Training exit code: ${{ steps.training.outputs.training_result }}
        - Status: $(if [ "${{ steps.training.outputs.training_result }}" -eq 0 ]; then echo "✅ Success"; else echo "❌ Failed"; fi)
        
        ## Files Generated
        \`\`\`
        $(find models/ data/registry/ -type f -newer $(date -d '1 hour ago' +%Y%m%d-%H%M%S) || echo "No new files")
        \`\`\`
        
        ## Next Steps
        - Models promoted to registry will be automatically picked up by hot-reload system
        - Check dashboard for updated model performance metrics
        EOF
        
    - name: Commit promoted models to repository
      if: steps.training.outputs.training_result == '0'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/registry/
        if ! git diff --staged --quiet; then
          git commit -m "Monthly ML training: promote models $(date +'%Y-%m-%d')"
          git push
        else
          echo "No new models to commit"
        fi
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "Monthly training failed. Check logs and training configuration."
        # TODO: Add notification to Slack/email/etc.