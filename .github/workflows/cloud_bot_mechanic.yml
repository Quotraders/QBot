name: 🌩️ Cloud Bot Mechanic (Ultimate)

on:
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes
    - cron: '0 * * * *'     # Every hour for deep scan
    - cron: '0 */6 * * *'   # Every 6 hours for optimization
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operation mode'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - deep_scan
          - optimize
          - repair_all
          - emergency
      target:
        description: 'Target workflow (optional)'
        required: false
        type: string

env:
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  OPERATION_MODE: ${{ github.event.inputs.mode || 'auto' }}

permissions:
  contents: write
  issues: write
  actions: read

jobs:
  cloud-mechanic:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install Dependencies
      run: |
        pip install pyyaml requests croniter pytz

    - name: Run Cloud Mechanic Core
      id: mechanic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python Intelligence/mechanic/cloud/cloud_mechanic_core.py

    - name: Detailed Analysis
      if: github.event.inputs.mode == 'deep_scan' || github.event_name == 'schedule'
      run: |
        python Intelligence/mechanic/cloud/workflow_analyzer.py

    - name: Apply Optimizations
      if: steps.mechanic.outputs.needs_optimization == 'true'
      run: |
        python Intelligence/mechanic/cloud/workflow_optimizer.py

    - name: Apply Repairs
      if: steps.mechanic.outputs.repairs_needed == 'true'
      run: |
        python Intelligence/mechanic/cloud/repair_system.py

    - name: Generate Reports
      if: always()
      run: |
        python Intelligence/mechanic/cloud/report_generator.py

    - name: Check Critical Issues
      id: critical_check
      if: always()
      run: |
        if [ -f "Intelligence/mechanic/cloud/alerts/critical.json" ]; then
          echo "has_critical=true" >> $GITHUB_OUTPUT
          echo "alert_title=$(python -c "import json; print(json.load(open('Intelligence/mechanic/cloud/alerts/critical.json'))['title'])")" >> $GITHUB_OUTPUT
        else
          echo "has_critical=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Issue for Critical Problems
      if: steps.critical_check.outputs.has_critical == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const alertData = JSON.parse(fs.readFileSync('Intelligence/mechanic/cloud/alerts/critical.json'));

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Cloud Mechanic: ${alertData.title}`,
            body: alertData.message,
            labels: ['cloud-mechanic', 'critical', 'auto-detected']
          });

    - name: Commit Repairs and Optimizations
      if: steps.mechanic.outputs.changes_made == 'true'
      run: |
        git config --global user.email "cloud-mechanic@bot.com"
        git config --global user.name "Cloud Bot Mechanic"

        git add -A
        git diff --cached --quiet || git commit -m "🌩️ Cloud Mechanic: Auto-repairs and optimizations

        Generated: $(date -u)
        Mode: ${{ env.OPERATION_MODE }}
        
        $(cat Intelligence/mechanic/cloud/logs/commit_message.txt 2>/dev/null || echo 'Routine maintenance')"

        git push

    - name: Upload Mechanic Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cloud-mechanic-reports-${{ github.run_number }}
        path: |
          Intelligence/mechanic/cloud/database/
          Intelligence/mechanic/cloud/reports/
          Intelligence/mechanic/cloud/alerts/
        retention-days: 30

    - name: Send Discord/Slack Notification
      if: steps.critical_check.outputs.has_critical == 'true'
      run: |
        # Add your webhook URL here if you want notifications
        echo "Critical issue detected: ${{ steps.critical_check.outputs.alert_title }}"
