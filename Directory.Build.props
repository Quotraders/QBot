<Project>
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <LangVersion>latest</LangVersion>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    
    <!-- PRODUCTION HARDENING: ABSOLUTE ZERO TOLERANCE FOR NON-PRODUCTION CODE -->
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsAsErrors>CS0162;CS0168;CS0219;CS0414;CS0649;CS0693;CS1717;CS8602;CS8604;CS8618;CS8625;CS1998</WarningsAsErrors>
    
    <!-- Enable nullable reference types solution-wide -->
    <Nullable>enable</Nullable>
    
    <!-- Enable static code analysis with production-ready enforcement -->
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <AnalysisLevel>latest</AnalysisLevel>
    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
    
    <!-- Security and reliability analyzers -->
    <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
    <RunCodeAnalysis>true</RunCodeAnalysis>
    
    <!-- PRODUCTION ENFORCEMENT: ALL WARNINGS ARE ERRORS - ABSOLUTELY NO SUPPRESSIONS ALLOWED -->
    <!-- Every single analyzer warning must be fixed, not suppressed -->
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsAsErrors />
    <WarningsNotAsErrors />
    
    <!-- ENHANCED BUSINESS LOGIC ENFORCEMENT -->
    <EnforceBusinessLogicValidation>true</EnforceBusinessLogicValidation>
    <FailBuildOnProductionViolations>true</FailBuildOnProductionViolations>
    
    <!-- STUB DETECTION: Additional CA rules for NotImplementedException and unused code -->
    <WarningsAsErrors>$(WarningsAsErrors);CA1065;CA2201;IDE0060;IDE0051;IDE0052</WarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <!-- Microsoft Code Analysis analyzers -->
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="8.0.0" PrivateAssets="all" />
    
    <!-- Security analyzers -->
    <PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.4" PrivateAssets="all" />
    <PackageReference Include="SecurityCodeScan.VS2019" Version="5.6.7" PrivateAssets="all" />
    
    <!-- Additional quality analyzers -->
    <PackageReference Include="AsyncFixer" Version="1.6.0" PrivateAssets="all" />
    <PackageReference Include="SonarAnalyzer.CSharp" Version="9.32.0.97167" PrivateAssets="all" />
    
    <!-- Custom production rule enforcement analyzer -->
    <Analyzer Include="$(MSBuildThisFileDirectory)src/Safety/bin/$(Configuration)/net8.0/Safety.dll" Condition="Exists('$(MSBuildThisFileDirectory)src/Safety/bin/$(Configuration)/net8.0/Safety.dll')" />
  </ItemGroup>

  <!-- PRODUCTION ENFORCEMENT: ZERO-TOLERANCE GENERALIZED DETECTION FOR ALL NON-PRODUCTION PATTERNS -->
  <Target Name="ProductionReadinessCheck" BeforeTargets="Build">
    <ItemGroup>
      <SourceFiles Include="**/*.cs" Exclude="bin/**;obj/**;packages/**;**/test*/**;**/Test*/**" />
    </ItemGroup>
    
    <!-- Phase 1: Specific Hardcoded Business Values Detection (addresses issue #3304685224) -->
    <!-- Only catch position sizing, confidence, and regime detection in business context, not placeholders or math constants -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -not -path './mock*/*' -not -path './Mock*/*' -not -path './simulation*/*' -not -path './Simulation*/*' -exec grep -l -E '(PositionSize|positionSize).*=\s*2\.5[^0-9]|(ModelConfidence|modelConfidence).*>=\s*0\.7[^0-9]|(RegimeDetection|regimeDetection).*=\s*1\.0[^0-9]' {} \; | grep -v -E 'TODO|PLACEHOLDER|placeholder' | grep -q .; then echo 'PRODUCTION VIOLATION: Hardcoded business values detected in position sizing, confidence, or regime detection. Use MLConfigurationService instead.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 2: Agent Rule Suppression Detection (addresses issue #3304685224) -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '#pragma\s+warning\s+disable|SuppressMessage.*without.*RuntimeProof' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Agent attempting to disable build rules without RuntimeProof justification.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 3: Commented Analyzer Rules Detection -->
    <Exec Command="if find . -name '.editorconfig' -exec grep -l -E '^\s*#.*dotnet_diagnostic.*severity' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Commented-out analyzer rules detected in .editorconfig.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 4: COMPREHENSIVE Placeholder/Mock/Stub Detection -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E 'PLACEHOLDER|TEMP|DUMMY|MOCK|FAKE|STUB|HARDCODED|SAMPLE' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Placeholder/Mock/Stub patterns detected. All code must be production-ready. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 5: Fake Data Arrays Detection -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E 'new\s+(byte|int|double|float|decimal)\[\s*[0-9]+\s*\]' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Fixed-size data arrays detected. Use dynamic sizing. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 6: Empty Async Placeholder Detection -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E 'Task\.Yield\(\)|Task\.Delay\([0-9]+\)|throw\s+new\s+NotImplementedException|return\s+Task\.CompletedTask\s*;' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Empty/placeholder async implementations detected. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 7: Test/Dev-Only Comments Detection -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '//\s*for\s+testing|//\s*debug\s+only|//\s*temporary|//\s*remove\s+this|//\s*TODO|//\s*FIXME|//\s*HACK' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Development/testing-only code comments detected. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 8: Commented-Out Code Detection (actual code blocks only) -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '^\s*//\s*(if\s*\(|for\s*\(|while\s*\(|return\s+[^/]|var\s+|public\s+|private\s+|\w+\s*=)' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Commented-out code blocks detected. Remove unused code. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 9: Weak Random Generation Detection -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E 'new\s+Random\s*\(|Random\.Shared' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Weak random number generation detected. Use cryptographically secure random. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 10: Python 'pass' Statement Detection -->
    <Exec Command="if find . -name '*.py' -path './src/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '^\s*pass\s*$' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Python pass statements detected in production code. Implement actual logic. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 11: Empty C# Method Bodies Detection -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '\{\s*\}' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Empty method/constructor bodies detected. Implement actual logic. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 12: Short Method Detection (Methods with < 3 lines without proper attributes) -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec awk '/public|private|protected|internal/ &amp;&amp; /\(.*\)/ &amp;&amp; !/\[Obsolete\]/ &amp;&amp; !/\[GeneratedCode\]/ { inMethod=1; lineCount=0; } inMethod &amp;&amp; /\{/ { inMethod=2; } inMethod==2 { lineCount++; } inMethod==2 &amp;&amp; /\}/ { if(lineCount &lt; 3) print FILENAME; inMethod=0; }' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Methods with fewer than 3 lines detected without [Obsolete] or [GeneratedCode] attributes. Build failed.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
  </Target>
  
  <!-- BUSINESS LOGIC VALIDATION: Focus on specific issues mentioned in #3304685224 -->
  <Target Name="TradingBotBusinessLogicValidation" BeforeTargets="Build">
    <!-- Focus on the specific hardcoded values mentioned: 2.5, 0.7, 1.0 -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -not -path './mock*/*' -not -path './Mock*/*' -not -path './simulation*/*' -not -path './Simulation*/*' -exec grep -l -E '(PositionSize|positionSize|Position|position).*[=:]\s*(2\.5)[^0-9f]' {} \; | grep -q .; then echo 'CRITICAL: Hardcoded position sizing value 2.5 detected. Use MLConfigurationService.GetPositionSizeMultiplier() instead.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -not -path './mock*/*' -not -path './Mock*/*' -not -path './simulation*/*' -not -path './Simulation*/*' -exec grep -l -E '(Confidence|confidence).*[=:]\s*(0\.7)[^0-9f]' {} \; | grep -q .; then echo 'CRITICAL: Hardcoded AI confidence value 0.7 detected. Use MLConfigurationService.GetAIConfidenceThreshold() instead.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -not -path './mock*/*' -not -path './Mock*/*' -not -path './simulation*/*' -not -path './Simulation*/*' -exec grep -l -E '(Regime|regime).*[=:]\s*(1\.0)[^0-9f]' {} \; | grep -q .; then echo 'CRITICAL: Hardcoded regime detection value 1.0 detected. Use MLConfigurationService.GetRegimeDetectionThreshold() instead.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
  </Target>

  <!-- COMPREHENSIVE PRODUCTION ANALYZER RULES - Comment #3304718814 -->
  <!-- Ultra-comprehensive zero-tolerance detection for ALL non-production patterns -->
  <Target Name="UltraComprehensiveProductionValidation" BeforeTargets="Build">
    <!-- Phase 1: All TODO/FIXME/HACK patterns -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '//\s*(TODO|FIXME|HACK|STUB|PLACEHOLDER|TEMP|DEBUG|REMOVE|DELETE)' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Development comments detected. All TODO/FIXME/HACK/etc must be resolved.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 2: Any hardcoded numerical constants in business logic -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '=\s*[0-9]+\.[0-9]+[^f]|=\s*[0-9]+[^.0-9]' {} \; | grep -v -E 'const|readonly|static.*readonly' | grep -q .; then echo 'PRODUCTION VIOLATION: Hardcoded numerical values detected. Use configuration or constants.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 3: Mock/Fake/Stub patterns -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E '(Mock|Fake|Stub|Dummy|Sample)' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Mock/Fake/Stub patterns detected in production code.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
    
    <!-- Phase 4: Development-only patterns -->
    <Exec Command="if find . -name '*.cs' -not -path './bin/*' -not -path './obj/*' -not -path './packages/*' -not -path './test*/*' -not -path './Test*/*' -exec grep -l -E 'Console\.WriteLine|System\.Diagnostics\.Debug|Debugger\.' {} \; | grep -q .; then echo 'PRODUCTION VIOLATION: Development-only debug patterns detected.'; exit 1; fi"
          ContinueOnError="false"
          IgnoreExitCode="false" />
  </Target>

</Project>
